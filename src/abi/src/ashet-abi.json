{
 "root_container": {
  "decls": [
   {
    "name": "resources",
    "docs": "\nAll syscalls related to generic resource management.",
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "get_type",
        "docs": "Returns the type of the system resource.",
        "full_qualified_name": "resources.get_type",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "SystemResource.Type"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "SystemResource.Type"
             }
            }
           }
          },
          "key": "resources_get_type",
          "value": 1
         }
        }
       },
       {
        "name": "get_owners",
        "docs": "Returns the current owner of this resource.",
        "full_qualified_name": "resources.get_owners",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            },
            {
             "name": "owners",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            },
            {
             "name": "owners_ptr",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "owners_len",
             "docs": "Length of owners_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "resources_get_owners",
          "value": 2
         }
        }
       },
       {
        "name": "send_to_process",
        "docs": "Adds the process to the owners of this resource, so the process",
        "full_qualified_name": "resources.send_to_process",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            },
            {
             "name": "_param1",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Process"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            },
            {
             "name": "_param1",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Process"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "void"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "DeadProcess",
               "SystemResources",
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "void"
             }
            }
           }
          },
          "key": "resources_send_to_process",
          "value": 3
         }
        }
       },
       {
        "name": "release",
        "docs": "Drops the ownership of the resource for the current process.",
        "full_qualified_name": "resources.release",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "resources_release",
          "value": 4
         }
        }
       },
       {
        "name": "destroy",
        "docs": "Immediatly destroys the resource and releases its memory.",
        "full_qualified_name": "resources.destroy",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SystemResource"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "resources_destroy",
          "value": 5
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "overlapped",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "schedule",
        "docs": "Starts new asynchronous operations.",
        "full_qualified_name": "overlapped.schedule",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "async_call",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "ARC"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "async_call",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "ARC"
                }
               }
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "void"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "AlreadyScheduled",
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "void"
             }
            }
           }
          },
          "key": "overlapped_schedule",
          "value": 6
         }
        }
       },
       {
        "name": "await_completion",
        "docs": "Awaits one or more scheduled asynchronous operations and returns the",
        "full_qualified_name": "overlapped.await_completion",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "completed",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "PointerType": {
                 "size": "*",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "ARC"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "options",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Await_Options"
              }
             }
            }
           ],
           "native": [
            {
             "name": "completed_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "PointerType": {
                 "size": "*",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "ARC"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "completed_len",
             "docs": "Length of completed_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "options",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Await_Options"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "usize"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "Unscheduled"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "usize"
             }
            }
           }
          },
          "key": "overlapped_await_completion",
          "value": 7
         }
        }
       },
       {
        "name": "await_completion_of",
        "docs": "Awaits one or more explictic asynchronous operations and returns the",
        "full_qualified_name": "overlapped.await_completion_of",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "events",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "OptionalType": {
                 "inner": {
                  "PointerType": {
                   "size": "*",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "ARC"
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "events_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "OptionalType": {
                 "inner": {
                  "PointerType": {
                   "size": "*",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "ARC"
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "events_len",
             "docs": "Length of events_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "usize"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidOperation",
               "Unscheduled"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "usize"
             }
            }
           }
          },
          "key": "overlapped_await_completion_of",
          "value": 8
         }
        }
       },
       {
        "name": "cancel",
        "docs": "Cancels an asynchronous call.",
        "full_qualified_name": "overlapped.cancel",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "aop",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "ARC"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "aop",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "ARC"
                }
               }
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "void"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "Completed",
               "Unscheduled"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "void"
             }
            }
           }
          },
          "key": "overlapped_cancel",
          "value": 9
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "process",
    "docs": "Syscalls related to processes",
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "get_file_name",
        "docs": "Returns a pointer to the file name of the process.",
        "full_qualified_name": "process.get_file_name",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "ReferenceType": {
                 "name": "Process"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "ReferenceType": {
                 "name": "Process"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "0",
            "const": true,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          },
          "key": "process_get_file_name",
          "value": 10
         }
        }
       },
       {
        "name": "get_base_address",
        "docs": "Returns the base address of the process.",
        "full_qualified_name": "process.get_base_address",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "ReferenceType": {
                 "name": "Process"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "ReferenceType": {
                 "name": "Process"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "process_get_base_address",
          "value": 11
         }
        }
       },
       {
        "name": "get_arguments",
        "docs": "Returns the arguments that were passed to this process in `Spawn`.",
        "full_qualified_name": "process.get_arguments",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "ReferenceType": {
                 "name": "Process"
                }
               }
              }
             }
            },
            {
             "name": "argv",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "SpawnProcessArg"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "ReferenceType": {
                 "name": "Process"
                }
               }
              }
             }
            },
            {
             "name": "argv_ptr",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "SpawnProcessArg"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "argv_len",
             "docs": "Length of argv_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": true,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "process_get_arguments",
          "value": 12
         }
        }
       },
       {
        "name": "terminate",
        "docs": "Terminates the current process with the given exit code",
        "full_qualified_name": "process.terminate",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "exit_code",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "ExitCode"
              }
             }
            }
           ],
           "native": [
            {
             "name": "exit_code",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "ExitCode"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "noreturn"
           }
          },
          "key": "process_terminate",
          "value": 13
         }
        }
       },
       {
        "name": "kill",
        "docs": "Terminates a foreign process.",
        "full_qualified_name": "process.kill",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Process"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Process"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "process_kill",
          "value": 14
         }
        }
       },
       {
        "name": "Spawn",
        "docs": "Spawns a new process",
        "full_qualified_name": "process.Spawn",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": "Relative banse directory for `path`.",
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path",
             "docs": "File name of the executable relative to `dir`.",
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "argv",
             "docs": "The arguments passed to the process.",
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "SpawnProcessArg"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": "Relative banse directory for `path`.",
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": "File name of the executable relative to `dir`.",
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": "Length of path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "argv_ptr",
             "docs": "The arguments passed to the process.",
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "SpawnProcessArg"
                }
               }
              }
             }
            },
            {
             "name": "argv_len",
             "docs": "Length of argv_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "process",
             "docs": "Handle to the spawned process.",
             "type": {
              "ReferenceType": {
               "name": "Process"
              }
             }
            }
           ],
           "native": [
            {
             "name": "process",
             "docs": "Handle to the spawned process.",
             "type": {
              "ReferenceType": {
               "name": "Process"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "SystemResources",
             "BadExecutable",
             "InvalidHandle",
             "FileNotFound",
             "InvalidPath",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "thread",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": [
           {
            "name": "yield",
            "docs": "Returns control to the scheduler. Returns when the scheduler",
            "full_qualified_name": "process.thread.yield",
            "value": {
             "Function": {
              "params": {
               "abi": [],
               "native": [],
               "annotations": []
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "void"
               }
              },
              "key": "process_thread_yield",
              "value": 15
             }
            }
           },
           {
            "name": "exit",
            "docs": "Terminates the current thread.",
            "full_qualified_name": "process.thread.exit",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "exit_code",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "ExitCode"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "exit_code",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "ExitCode"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "noreturn"
               }
              },
              "key": "process_thread_exit",
              "value": 16
             }
            }
           },
           {
            "name": "join",
            "docs": "Waits for the thread to exit and returns its return code.",
            "full_qualified_name": "process.thread.join",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "_param0",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Thread"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "_param0",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Thread"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "ExitCode"
               }
              },
              "key": "process_thread_join",
              "value": 17
             }
            }
           },
           {
            "name": "spawn",
            "docs": "Spawns a new thread with `function` passing `arg` to it.",
            "full_qualified_name": "process.thread.spawn",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "function",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "ThreadFunction"
                  }
                 }
                },
                {
                 "name": "arg",
                 "docs": null,
                 "type": {
                  "OptionalType": {
                   "inner": {
                    "PointerType": {
                     "size": "*",
                     "sentinel": "None",
                     "const": false,
                     "volatile": false,
                     "alignment": null,
                     "inner": {
                      "ReferenceType": {
                       "name": "anyopaque"
                      }
                     }
                    }
                   }
                  }
                 }
                },
                {
                 "name": "stack_size",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "function",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "ThreadFunction"
                  }
                 }
                },
                {
                 "name": "arg",
                 "docs": null,
                 "type": {
                  "OptionalType": {
                   "inner": {
                    "PointerType": {
                     "size": "*",
                     "sentinel": "None",
                     "const": false,
                     "volatile": false,
                     "alignment": null,
                     "inner": {
                      "ReferenceType": {
                       "name": "anyopaque"
                      }
                     }
                    }
                   }
                  }
                 }
                },
                {
                 "name": "stack_size",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": true,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "OptionalType": {
                "inner": {
                 "ReferenceType": {
                  "name": "Thread"
                 }
                }
               }
              },
              "key": "process_thread_spawn",
              "value": 18
             }
            }
           },
           {
            "name": "kill",
            "docs": "Kills the given thread with `exit_code`.",
            "full_qualified_name": "process.thread.kill",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "_param0",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Thread"
                  }
                 }
                },
                {
                 "name": "exit_code",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "ExitCode"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "_param0",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Thread"
                  }
                 }
                },
                {
                 "name": "exit_code",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "ExitCode"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "void"
               }
              },
              "key": "process_thread_kill",
              "value": 19
             }
            }
           }
          ]
         }
        }
       },
       {
        "name": "debug",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": [
           {
            "name": "write_log",
            "docs": "Writes to the system debug log.",
            "full_qualified_name": "process.debug.write_log",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "log_level",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "LogLevel"
                  }
                 }
                },
                {
                 "name": "message",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "log_level",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "LogLevel"
                  }
                 }
                },
                {
                 "name": "message_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "message_len",
                 "docs": "Length of message_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "void"
               }
              },
              "key": "process_debug_write_log",
              "value": 20
             }
            }
           },
           {
            "name": "breakpoint",
            "docs": "Stops the process and allows debugging.",
            "full_qualified_name": "process.debug.breakpoint",
            "value": {
             "Function": {
              "params": {
               "abi": [],
               "native": [],
               "annotations": []
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "void"
               }
              },
              "key": "process_debug_breakpoint",
              "value": 21
             }
            }
           }
          ]
         }
        }
       },
       {
        "name": "memory",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": [
           {
            "name": "allocate",
            "docs": "Allocates memory",
            "full_qualified_name": "process.memory.allocate",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "size",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "ptr_align",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "size",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "ptr_align",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "OptionalType": {
                "inner": {
                 "PointerType": {
                  "size": "[*]",
                  "sentinel": "None",
                  "const": false,
                  "volatile": false,
                  "alignment": null,
                  "inner": {
                   "ReferenceType": {
                    "name": "u8"
                   }
                  }
                 }
                }
               }
              },
              "key": "process_memory_allocate",
              "value": 22
             }
            }
           },
           {
            "name": "release",
            "docs": "Returns memory to the systme.",
            "full_qualified_name": "process.memory.release",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "mem",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "ptr_align",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "mem_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "mem_len",
                 "docs": "Length of mem_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "ptr_align",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "void"
               }
              },
              "key": "process_memory_release",
              "value": 23
             }
            }
           }
          ]
         }
        }
       },
       {
        "name": "monitor",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": [
           {
            "name": "enumerate_processes",
            "docs": "Queries all owned resources by a process.",
            "full_qualified_name": "process.monitor.enumerate_processes",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "processes",
                 "docs": null,
                 "type": {
                  "OptionalType": {
                   "inner": {
                    "PointerType": {
                     "size": "[]",
                     "sentinel": "None",
                     "const": false,
                     "volatile": false,
                     "alignment": null,
                     "inner": {
                      "ReferenceType": {
                       "name": "Process"
                      }
                     }
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "processes_ptr",
                 "docs": null,
                 "type": {
                  "OptionalType": {
                   "inner": {
                    "PointerType": {
                     "size": "[*]",
                     "sentinel": "None",
                     "const": false,
                     "volatile": false,
                     "alignment": null,
                     "inner": {
                      "ReferenceType": {
                       "name": "Process"
                      }
                     }
                    }
                   }
                  }
                 }
                },
                {
                 "name": "processes_len",
                 "docs": "Length of processes_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": true,
                 "is_optional": true,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "usize"
               }
              },
              "key": "process_monitor_enumerate_processes",
              "value": 24
             }
            }
           },
           {
            "name": "query_owned_resources",
            "docs": "Queries all owned resources by a process.",
            "full_qualified_name": "process.monitor.query_owned_resources",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "owner",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                },
                {
                 "name": "reslist",
                 "docs": null,
                 "type": {
                  "OptionalType": {
                   "inner": {
                    "PointerType": {
                     "size": "[]",
                     "sentinel": "None",
                     "const": false,
                     "volatile": false,
                     "alignment": null,
                     "inner": {
                      "ReferenceType": {
                       "name": "SystemResource"
                      }
                     }
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "owner",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                },
                {
                 "name": "reslist_ptr",
                 "docs": null,
                 "type": {
                  "OptionalType": {
                   "inner": {
                    "PointerType": {
                     "size": "[*]",
                     "sentinel": "None",
                     "const": false,
                     "volatile": false,
                     "alignment": null,
                     "inner": {
                      "ReferenceType": {
                       "name": "SystemResource"
                      }
                     }
                    }
                   }
                  }
                 }
                },
                {
                 "name": "reslist_len",
                 "docs": "Length of reslist_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": true,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "usize"
               }
              },
              "key": "process_monitor_query_owned_resources",
              "value": 25
             }
            }
           },
           {
            "name": "query_total_memory_usage",
            "docs": "Returns the total number of bytes the process takes up in RAM.",
            "full_qualified_name": "process.monitor.query_total_memory_usage",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "proc",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "proc",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "usize"
               }
              },
              "key": "process_monitor_query_total_memory_usage",
              "value": 26
             }
            }
           },
           {
            "name": "query_dynamic_memory_usage",
            "docs": "Returns the number of dynamically allocated bytes for this process.",
            "full_qualified_name": "process.monitor.query_dynamic_memory_usage",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "proc",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "proc",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "usize"
               }
              },
              "key": "process_monitor_query_dynamic_memory_usage",
              "value": 27
             }
            }
           },
           {
            "name": "query_active_allocation_count",
            "docs": "Returns the number of total memory objects this process has right now.",
            "full_qualified_name": "process.monitor.query_active_allocation_count",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "proc",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "proc",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Process"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ReferenceType": {
                "name": "usize"
               }
              },
              "key": "process_monitor_query_active_allocation_count",
              "value": 28
             }
            }
           }
          ]
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "clock",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "monotonic",
        "docs": "Returns the time in nanoseconds since system startup.",
        "full_qualified_name": "clock.monotonic",
        "value": {
         "Function": {
          "params": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "Absolute"
           }
          },
          "key": "clock_monotonic",
          "value": 29
         }
        }
       },
       {
        "name": "Timer",
        "docs": "Sleeps until `clock.monotonic()` returns at least `timeout`.",
        "full_qualified_name": "clock.Timer",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "timeout",
             "docs": "Monotonic timestamp in nanoseconds until the operation completes.",
             "type": {
              "ReferenceType": {
               "name": "Absolute"
              }
             }
            }
           ],
           "native": [
            {
             "name": "timeout",
             "docs": "Monotonic timestamp in nanoseconds until the operation completes.",
             "type": {
              "ReferenceType": {
               "name": "Absolute"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "datetime",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "now",
        "docs": "Get a calendar timestamp relative to UTC 1970-01-01.",
        "full_qualified_name": "datetime.now",
        "value": {
         "Function": {
          "params": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "DateTime"
           }
          },
          "key": "datetime_now",
          "value": 30
         }
        }
       },
       {
        "name": "Alarm",
        "docs": "Sleeps until `datetime.now()` returns a point in  time that comes after `when`.",
        "full_qualified_name": "datetime.Alarm",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "when",
             "docs": "Earliest possible date time of when the alarm triggers.",
             "type": {
              "ReferenceType": {
               "name": "DateTime"
              }
             }
            }
           ],
           "native": [
            {
             "name": "when",
             "docs": "Earliest possible date time of when the alarm triggers.",
             "type": {
              "ReferenceType": {
               "name": "DateTime"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "video",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "enumerate",
        "docs": "Returns a list of all video outputs.",
        "full_qualified_name": "video.enumerate",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "ids",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "VideoOutputID"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "ids_ptr",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "VideoOutputID"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "ids_len",
             "docs": "Length of ids_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "video_enumerate",
          "value": 31
         }
        }
       },
       {
        "name": "acquire",
        "docs": "Acquire exclusive access to a video output.",
        "full_qualified_name": "video.acquire",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutputID"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutputID"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "VideoOutput"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "NotAvailable",
               "SystemResources",
               "NotFound"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "VideoOutput"
             }
            }
           }
          },
          "key": "video_acquire",
          "value": 32
         }
        }
       },
       {
        "name": "get_resolution",
        "docs": "Returns the current resolution",
        "full_qualified_name": "video.get_resolution",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Size"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Size"
             }
            }
           }
          },
          "key": "video_get_resolution",
          "value": 33
         }
        }
       },
       {
        "name": "get_video_memory",
        "docs": "Returns a pointer to linear video memory, row-major.",
        "full_qualified_name": "video.get_video_memory",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "VideoMemory"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "VideoMemory"
             }
            }
           }
          },
          "key": "video_get_video_memory",
          "value": 34
         }
        }
       },
       {
        "name": "WaitForVBlank",
        "docs": "\nThis allows frame-synchronized presentation of video data.",
        "full_qualified_name": "video.WaitForVBlank",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "output",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            }
           ],
           "native": [
            {
             "name": "output",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidHandle"
            ]
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "random",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "get_soft_random",
        "docs": "Fills the provided pointer with random bytes from the entropy pool.",
        "full_qualified_name": "random.get_soft_random",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "data",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "data_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "data_len",
             "docs": "Length of data_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "random_get_soft_random",
          "value": 35
         }
        }
       },
       {
        "name": "GetStrictRandom",
        "docs": "This call blocks until the entropy pool has enough entropy to fill\nan entire hash to draw from.",
        "full_qualified_name": "random.GetStrictRandom",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "data",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "data_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "data_len",
             "docs": "Length of data_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "input",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "GetEvent",
        "docs": "Waits for an input event and completes when any input was done.",
        "full_qualified_name": "input.GetEvent",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "outputs": {
           "abi": [
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "InputEvent"
              }
             }
            }
           ],
           "native": [
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "InputEvent"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "NonExclusiveAccess",
             "InProgress"
            ]
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "network",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "dns",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": []
         }
        }
       },
       {
        "name": "udp",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": [
           {
            "name": "create_socket",
            "docs": "Creates a new TCP socket.",
            "full_qualified_name": "network.udp.create_socket",
            "value": {
             "Function": {
              "params": {
               "abi": [],
               "native": [
                {
                 "name": "__return_value",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "*",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "UdpSocket"
                    }
                   }
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": true
                }
               ]
              },
              "abi_return_type": {
               "ErrorUnion": {
                "error": {
                 "ErrorSet": {
                  "errors": [
                   "SystemResources"
                  ]
                 }
                },
                "result": {
                 "ReferenceType": {
                  "name": "UdpSocket"
                 }
                }
               }
              },
              "key": "network_udp_create_socket",
              "value": 36
             }
            }
           },
           {
            "name": "Bind",
            "docs": null,
            "full_qualified_name": "network.udp.Bind",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "IllegalValue",
                 "SystemResources",
                 "InvalidHandle",
                 "AddressInUse"
                ]
               }
              }
             }
            }
           },
           {
            "name": "Connect",
            "docs": null,
            "full_qualified_name": "network.udp.Connect",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "target",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "target",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [],
               "native": [],
               "annotations": []
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "BufferError",
                 "Timeout",
                 "AlreadyConnecting",
                 "IllegalArgument",
                 "SystemResources",
                 "InvalidHandle",
                 "LowlevelInterfaceError",
                 "AlreadyConnected",
                 "OutOfMemory",
                 "InProgress",
                 "Routing",
                 "IllegalValue"
                ]
               }
              }
             }
            }
           },
           {
            "name": "Disconnect",
            "docs": null,
            "full_qualified_name": "network.udp.Disconnect",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [],
               "native": [],
               "annotations": []
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "NotConnected",
                 "SystemResources",
                 "InvalidHandle"
                ]
               }
              }
             }
            }
           },
           {
            "name": "Send",
            "docs": null,
            "full_qualified_name": "network.udp.Send",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "data",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "data_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "data_len",
                 "docs": "Length of data_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [
                {
                 "name": "bytes_sent",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "bytes_sent",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "BufferError",
                 "Timeout",
                 "IllegalArgument",
                 "SystemResources",
                 "InvalidHandle",
                 "LowlevelInterfaceError",
                 "OutOfMemory",
                 "InProgress",
                 "NotConnected",
                 "Routing",
                 "IllegalValue"
                ]
               }
              }
             }
            }
           },
           {
            "name": "SendTo",
            "docs": null,
            "full_qualified_name": "network.udp.SendTo",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "receiver",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                },
                {
                 "name": "data",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "receiver",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                },
                {
                 "name": "data_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "data_len",
                 "docs": "Length of data_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [
                {
                 "name": "bytes_sent",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "bytes_sent",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "BufferError",
                 "Timeout",
                 "IllegalArgument",
                 "SystemResources",
                 "InvalidHandle",
                 "LowlevelInterfaceError",
                 "OutOfMemory",
                 "InProgress",
                 "Routing",
                 "IllegalValue"
                ]
               }
              }
             }
            }
           },
           {
            "name": "ReceiveFrom",
            "docs": null,
            "full_qualified_name": "network.udp.ReceiveFrom",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "buffer",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "UdpSocket"
                  }
                 }
                },
                {
                 "name": "buffer_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "buffer_len",
                 "docs": "Length of buffer_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [
                {
                 "name": "bytes_received",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "sender",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "bytes_received",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "sender",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "BufferError",
                 "Timeout",
                 "IllegalArgument",
                 "SystemResources",
                 "InvalidHandle",
                 "LowlevelInterfaceError",
                 "OutOfMemory",
                 "InProgress",
                 "Routing",
                 "IllegalValue"
                ]
               }
              }
             }
            }
           }
          ]
         }
        }
       },
       {
        "name": "tcp",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": [
           {
            "name": "create_socket",
            "docs": "Creates a new UDP socket.",
            "full_qualified_name": "network.tcp.create_socket",
            "value": {
             "Function": {
              "params": {
               "abi": [],
               "native": [
                {
                 "name": "__return_value",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "*",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "TcpSocket"
                    }
                   }
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": true
                }
               ]
              },
              "abi_return_type": {
               "ErrorUnion": {
                "error": {
                 "ErrorSet": {
                  "errors": [
                   "SystemResources"
                  ]
                 }
                },
                "result": {
                 "ReferenceType": {
                  "name": "TcpSocket"
                 }
                }
               }
              },
              "key": "network_tcp_create_socket",
              "value": 37
             }
            }
           },
           {
            "name": "Bind",
            "docs": null,
            "full_qualified_name": "network.tcp.Bind",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "bind_point",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "IllegalValue",
                 "SystemResources",
                 "InvalidHandle",
                 "AddressInUse"
                ]
               }
              }
             }
            }
           },
           {
            "name": "Connect",
            "docs": null,
            "full_qualified_name": "network.tcp.Connect",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "target",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "target",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "EndPoint"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [],
               "native": [],
               "annotations": []
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "BufferError",
                 "Timeout",
                 "AlreadyConnecting",
                 "ConnectionReset",
                 "ConnectionClosed",
                 "IllegalArgument",
                 "SystemResources",
                 "InvalidHandle",
                 "ConnectionAborted",
                 "LowlevelInterfaceError",
                 "AlreadyConnected",
                 "OutOfMemory",
                 "InProgress",
                 "Routing",
                 "IllegalValue"
                ]
               }
              }
             }
            }
           },
           {
            "name": "Send",
            "docs": null,
            "full_qualified_name": "network.tcp.Send",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "data",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "data_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "data_len",
                 "docs": "Length of data_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [
                {
                 "name": "bytes_sent",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "bytes_sent",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "BufferError",
                 "Timeout",
                 "ConnectionReset",
                 "ConnectionClosed",
                 "IllegalArgument",
                 "SystemResources",
                 "InvalidHandle",
                 "ConnectionAborted",
                 "LowlevelInterfaceError",
                 "OutOfMemory",
                 "InProgress",
                 "NotConnected",
                 "Routing",
                 "IllegalValue"
                ]
               }
              }
             }
            }
           },
           {
            "name": "Receive",
            "docs": null,
            "full_qualified_name": "network.tcp.Receive",
            "value": {
             "AsyncOp": {
              "inputs": {
               "abi": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "buffer",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "read_all",
                 "docs": "if true, will read until `buffer.len` bytes arrived. otherwise will read until the end of a single packet",
                 "type": {
                  "ReferenceType": {
                   "name": "bool"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "socket",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "TcpSocket"
                  }
                 }
                },
                {
                 "name": "buffer_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "buffer_len",
                 "docs": "Length of buffer_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "read_all",
                 "docs": "if true, will read until `buffer.len` bytes arrived. otherwise will read until the end of a single packet",
                 "type": {
                  "ReferenceType": {
                   "name": "bool"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "outputs": {
               "abi": [
                {
                 "name": "bytes_received",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "bytes_received",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "error": {
               "ErrorSet": {
                "errors": [
                 "BufferError",
                 "Timeout",
                 "AlreadyConnecting",
                 "ConnectionReset",
                 "ConnectionClosed",
                 "IllegalArgument",
                 "SystemResources",
                 "InvalidHandle",
                 "ConnectionAborted",
                 "LowlevelInterfaceError",
                 "AlreadyConnected",
                 "OutOfMemory",
                 "InProgress",
                 "NotConnected",
                 "Routing",
                 "IllegalValue"
                ]
               }
              }
             }
            }
           }
          ]
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "fs",
    "docs": "A file or directory on Ashet OS can be named with any legal UTF-8 sequence",
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "find_filesystem",
        "docs": "Finds a file system by name",
        "full_qualified_name": "fs.find_filesystem",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "name",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "name_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "name_len",
             "docs": "Length of name_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "FileSystemId"
           }
          },
          "key": "fs_find_filesystem",
          "value": 38
         }
        }
       },
       {
        "name": "Sync",
        "docs": "Flushes all open files to disk.",
        "full_qualified_name": "fs.Sync",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "GetFilesystemInfo",
        "docs": "Also returns a `next` id that can be used to iterate over all filesystems.\nThe `system` filesystem is guaranteed to be the first one.",
        "full_qualified_name": "fs.GetFilesystemInfo",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "fs",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemId"
              }
             }
            }
           ],
           "native": [
            {
             "name": "fs",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemId"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemInfo"
              }
             }
            },
            {
             "name": "next",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemId"
              }
             }
            }
           ],
           "native": [
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemInfo"
              }
             }
            },
            {
             "name": "next",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemId"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "InvalidFileSystem"
            ]
           }
          }
         }
        }
       },
       {
        "name": "OpenDrive",
        "docs": "opens a directory on a filesystem",
        "full_qualified_name": "fs.OpenDrive",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "fs",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemId"
              }
             }
            },
            {
             "name": "path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "fs",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileSystemId"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": "Length of path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "NotADir",
             "InvalidFileSystem",
             "SystemResources",
             "SystemFdQuotaExceeded",
             "FileNotFound",
             "InvalidPath",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "OpenDir",
        "docs": "opens a directory relative to the given dir handle.",
        "full_qualified_name": "fs.OpenDir",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": "Length of path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "NotADir",
             "SystemResources",
             "InvalidHandle",
             "SystemFdQuotaExceeded",
             "FileNotFound",
             "InvalidPath",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "CloseDir",
        "docs": "closes the directory handle",
        "full_qualified_name": "fs.CloseDir",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "ResetDirEnumeration",
        "docs": "resets the directory iterator to the starting point",
        "full_qualified_name": "fs.ResetDirEnumeration",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "SystemResources",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "EnumerateDir",
        "docs": "returns the info for the current file or \"eof\", and advances the iterator to the next entry if possible",
        "full_qualified_name": "fs.EnumerateDir",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "eof",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            },
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileInfo"
              }
             }
            }
           ],
           "native": [
            {
             "name": "eof",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            },
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileInfo"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "SystemResources",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "Delete",
        "docs": "deletes a file or directory by the given path.",
        "full_qualified_name": "fs.Delete",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "recurse",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": "Length of path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "recurse",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidPath",
             "DiskError",
             "InvalidHandle",
             "FileNotFound"
            ]
           }
          }
         }
        }
       },
       {
        "name": "MkDir",
        "docs": "creates a new directory relative to dir. If `path` contains subdirectories, all\ndirectories are created.",
        "full_qualified_name": "fs.MkDir",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "mkopen",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": "Length of path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "mkopen",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidPath",
             "DiskError",
             "Exists",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "StatEntry",
        "docs": "returns the type of the file/dir at path, also adds size and modification dates",
        "full_qualified_name": "fs.StatEntry",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileInfo"
              }
             }
            }
           ],
           "native": [
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileInfo"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidPath",
             "DiskError",
             "InvalidHandle",
             "FileNotFound"
            ]
           }
          }
         }
        }
       },
       {
        "name": "NearMove",
        "docs": "renames a file inside the same file system.\nNOTE: This is a cheap operation and does not require the copying of data.",
        "full_qualified_name": "fs.NearMove",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "src_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "src_path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "dst_path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "src_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "src_path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "src_path_len",
             "docs": "Length of src_path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "dst_path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "dst_path_len",
             "docs": "Length of dst_path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidHandle",
             "FileNotFound",
             "Exists",
             "InvalidPath",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "FarMove",
        "docs": "moves a file or directory between two unrelated directories. Can also move between different file systems.\nNOTE: This syscall might copy the data.",
        "full_qualified_name": "fs.FarMove",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "src_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "src_path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "dst_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "dst_path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "src_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "src_path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "src_path_len",
             "docs": "Length of src_path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "dst_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "dst_path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "dst_path_len",
             "docs": "Length of dst_path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidHandle",
             "NoSpaceLeft",
             "FileNotFound",
             "Exists",
             "InvalidPath",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "Copy",
        "docs": "copies a file or directory between two unrelated directories. Can also move between different file systems.",
        "full_qualified_name": "fs.Copy",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "src_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "src_path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "dst_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "dst_path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "src_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "src_path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "src_path_len",
             "docs": "Length of src_path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "dst_dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "dst_path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "dst_path_len",
             "docs": "Length of dst_path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InvalidHandle",
             "NoSpaceLeft",
             "FileNotFound",
             "Exists",
             "InvalidPath",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "OpenFile",
        "docs": "opens a file from the given directory.",
        "full_qualified_name": "fs.OpenFile",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "access",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileAccess"
              }
             }
            },
            {
             "name": "mode",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileMode"
              }
             }
            }
           ],
           "native": [
            {
             "name": "dir",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Directory"
              }
             }
            },
            {
             "name": "path_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "path_len",
             "docs": "Length of path_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "access",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileAccess"
              }
             }
            },
            {
             "name": "mode",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileMode"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "handle",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "native": [
            {
             "name": "handle",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "SystemResources",
             "InvalidHandle",
             "SystemFdQuotaExceeded",
             "NoSpaceLeft",
             "FileAlreadyExists",
             "FileNotFound",
             "Exists",
             "WriteProtected",
             "InvalidPath",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "CloseFile",
        "docs": "closes the handle and flushes the file.",
        "full_qualified_name": "fs.CloseFile",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "native": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "SystemResources",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "FlushFile",
        "docs": "makes sure this file is safely stored to mass storage device",
        "full_qualified_name": "fs.FlushFile",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "native": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "SystemResources",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "Read",
        "docs": "directly reads data from a given offset into the file. no streaming API to the kernel",
        "full_qualified_name": "fs.Read",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            },
            {
             "name": "offset",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "u64"
              }
             }
            },
            {
             "name": "buffer",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            },
            {
             "name": "offset",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "u64"
              }
             }
            },
            {
             "name": "buffer_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "buffer_len",
             "docs": "Length of buffer_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "count",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "native": [
            {
             "name": "count",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "SystemResources",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "Write",
        "docs": "directly writes data to a given offset into the file. no streaming API to the kernel",
        "full_qualified_name": "fs.Write",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            },
            {
             "name": "offset",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "u64"
              }
             }
            },
            {
             "name": "buffer",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            },
            {
             "name": "offset",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "u64"
              }
             }
            },
            {
             "name": "buffer_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "buffer_len",
             "docs": "Length of buffer_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "count",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "native": [
            {
             "name": "count",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "SystemResources",
             "InvalidHandle",
             "NoSpaceLeft",
             "WriteProtected",
             "DiskError"
            ]
           }
          }
         }
        }
       },
       {
        "name": "StatFile",
        "docs": "allows us to get the current size of the file, modification dates, and so on",
        "full_qualified_name": "fs.StatFile",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "native": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileInfo"
              }
             }
            }
           ],
           "native": [
            {
             "name": "info",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "FileInfo"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "SystemResources",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       },
       {
        "name": "Resize",
        "docs": "Resizes the file to the given length in bytes. Can be also used to truncate a file to zero length.",
        "full_qualified_name": "fs.Resize",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            },
            {
             "name": "length",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "u64"
              }
             }
            }
           ],
           "native": [
            {
             "name": "file",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "File"
              }
             }
            },
            {
             "name": "length",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "u64"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "DiskError",
             "SystemResources",
             "InvalidHandle",
             "NoSpaceLeft"
            ]
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "shm",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "create",
        "docs": "Constructs a new shared memory object with `size` bytes of memory.",
        "full_qualified_name": "shm.create",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "native": [
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "SharedMemory"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "SharedMemory"
             }
            }
           }
          },
          "key": "shm_create",
          "value": 39
         }
        }
       },
       {
        "name": "get_length",
        "docs": "Returns the number of bytes inside the given shared memory object.",
        "full_qualified_name": "shm.get_length",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SharedMemory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SharedMemory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "shm_get_length",
          "value": 40
         }
        }
       },
       {
        "name": "get_pointer",
        "docs": "Returns a pointer to the shared memory.",
        "full_qualified_name": "shm.get_pointer",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SharedMemory"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SharedMemory"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": 16,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          },
          "key": "shm_get_pointer",
          "value": 41
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "pipe",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "create",
        "docs": "Spawns a new pipe with `fifo_length` elements of `object_size` bytes.",
        "full_qualified_name": "pipe.create",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "object_size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "fifo_length",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "native": [
            {
             "name": "object_size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "fifo_length",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Pipe"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Pipe"
             }
            }
           }
          },
          "key": "pipe_create",
          "value": 42
         }
        }
       },
       {
        "name": "get_fifo_length",
        "docs": "Returns the length of the pipe-internal FIFO in elements.",
        "full_qualified_name": "pipe.get_fifo_length",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "pipe_get_fifo_length",
          "value": 43
         }
        }
       },
       {
        "name": "get_object_size",
        "docs": "Returns the size of the objects stored in the pipe.",
        "full_qualified_name": "pipe.get_object_size",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "pipe_get_object_size",
          "value": 44
         }
        }
       },
       {
        "name": "Write",
        "docs": "Writes elements from `data` into the given pipe.",
        "full_qualified_name": "pipe.Write",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "pipe",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            },
            {
             "name": "data",
             "docs": "Pointer to the first element. Length defines how many elements are to be transferred.",
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "stride",
             "docs": "Distance between each element in `data`. Can be different from the pipes element size",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "mode",
             "docs": "Defines how the write should operate.",
             "type": {
              "ReferenceType": {
               "name": "PipeMode"
              }
             }
            }
           ],
           "native": [
            {
             "name": "pipe",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            },
            {
             "name": "data_ptr",
             "docs": "Pointer to the first element. Length defines how many elements are to be transferred.",
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "data_len",
             "docs": "Length of data_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "stride",
             "docs": "Distance between each element in `data`. Can be different from the pipes element size",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "mode",
             "docs": "Defines how the write should operate.",
             "type": {
              "ReferenceType": {
               "name": "PipeMode"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "count",
             "docs": "Numbert of elements written into the pipe.",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "native": [
            {
             "name": "count",
             "docs": "Numbert of elements written into the pipe.",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       },
       {
        "name": "Read",
        "docs": "Reads elements from a pipe into `buffer`.",
        "full_qualified_name": "pipe.Read",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "pipe",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            },
            {
             "name": "buffer",
             "docs": "Points to the first element to be received.",
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "stride",
             "docs": "Distance between each element in `buffer`. Can be different from the pipes element size",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "mode",
             "docs": "Defines how the read should operate.",
             "type": {
              "ReferenceType": {
               "name": "PipeMode"
              }
             }
            }
           ],
           "native": [
            {
             "name": "pipe",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Pipe"
              }
             }
            },
            {
             "name": "buffer_ptr",
             "docs": "Points to the first element to be received.",
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "buffer_len",
             "docs": "Length of buffer_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "stride",
             "docs": "Distance between each element in `buffer`. Can be different from the pipes element size",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "mode",
             "docs": "Defines how the read should operate.",
             "type": {
              "ReferenceType": {
               "name": "PipeMode"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "count",
             "docs": "Number of elements read.",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "native": [
            {
             "name": "count",
             "docs": "Number of elements read.",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "sync",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "create_event",
        "docs": "Creates a new `SyncEvent` object that can be used to synchronize",
        "full_qualified_name": "sync.create_event",
        "value": {
         "Function": {
          "params": {
           "abi": [],
           "native": [
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "SyncEvent"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "SyncEvent"
             }
            }
           }
          },
          "key": "sync_create_event",
          "value": 45
         }
        }
       },
       {
        "name": "notify_one",
        "docs": "Completes one `WaitForEvent` IOP waiting for the given event.",
        "full_qualified_name": "sync.notify_one",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SyncEvent"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SyncEvent"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "sync_notify_one",
          "value": 46
         }
        }
       },
       {
        "name": "notify_all",
        "docs": "Completes all `WaitForEvent` IOP waiting for the given event.",
        "full_qualified_name": "sync.notify_all",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SyncEvent"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SyncEvent"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "sync_notify_all",
          "value": 47
         }
        }
       },
       {
        "name": "WaitForEvent",
        "docs": "Waits for the given `SyncEvent` to be notified.",
        "full_qualified_name": "sync.WaitForEvent",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SyncEvent"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "SyncEvent"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       },
       {
        "name": "create_mutex",
        "docs": "Creates a new mutual exclusion.",
        "full_qualified_name": "sync.create_mutex",
        "value": {
         "Function": {
          "params": {
           "abi": [],
           "native": [
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Mutex"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Mutex"
             }
            }
           }
          },
          "key": "sync_create_mutex",
          "value": 48
         }
        }
       },
       {
        "name": "try_lock",
        "docs": "Tries to lock a mutex and returns if it was successful.",
        "full_qualified_name": "sync.try_lock",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Mutex"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Mutex"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "bool"
           }
          },
          "key": "sync_try_lock",
          "value": 49
         }
        }
       },
       {
        "name": "unlock",
        "docs": "Unlocks a mutual exclusion. Completes a single `Lock` IOP if it exists.",
        "full_qualified_name": "sync.unlock",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Mutex"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Mutex"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "sync_unlock",
          "value": 50
         }
        }
       },
       {
        "name": "Lock",
        "docs": "Locks a mutex. Will complete once the mutex is locked.",
        "full_qualified_name": "sync.Lock",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Mutex"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Mutex"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "draw",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "get_system_font",
        "docs": "Returns the font data for the given font name, if any.",
        "full_qualified_name": "draw.get_system_font",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "font_name",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "font_name_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "font_name_len",
             "docs": "Length of font_name_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Font"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "FileNotFound",
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Font"
             }
            }
           }
          },
          "key": "draw_get_system_font",
          "value": 51
         }
        }
       },
       {
        "name": "create_font",
        "docs": "Creates a new custom font from the given data.",
        "full_qualified_name": "draw.create_font",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "data",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "data_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "data_len",
             "docs": "Length of data_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Font"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources",
               "InvalidData"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Font"
             }
            }
           }
          },
          "key": "draw_create_font",
          "value": 52
         }
        }
       },
       {
        "name": "is_system_font",
        "docs": "Returns true if the given font is a system-owned font.",
        "full_qualified_name": "draw.is_system_font",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Font"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Font"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "bool"
           }
          },
          "key": "draw_is_system_font",
          "value": 53
         }
        }
       },
       {
        "name": "create_memory_framebuffer",
        "docs": "Creates a new in-memory framebuffer that can be used for offscreen painting.",
        "full_qualified_name": "draw.create_memory_framebuffer",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            }
           ],
           "native": [
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Framebuffer"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Framebuffer"
             }
            }
           }
          },
          "key": "draw_create_memory_framebuffer",
          "value": 54
         }
        }
       },
       {
        "name": "create_video_framebuffer",
        "docs": "Creates a new framebuffer based off a video output. Can be used to output pixels",
        "full_qualified_name": "draw.create_video_framebuffer",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "VideoOutput"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Framebuffer"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources",
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Framebuffer"
             }
            }
           }
          },
          "key": "draw_create_video_framebuffer",
          "value": 55
         }
        }
       },
       {
        "name": "create_window_framebuffer",
        "docs": "Creates a new framebuffer that allows painting into a GUI window.",
        "full_qualified_name": "draw.create_window_framebuffer",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Framebuffer"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources",
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Framebuffer"
             }
            }
           }
          },
          "key": "draw_create_window_framebuffer",
          "value": 56
         }
        }
       },
       {
        "name": "create_widget_framebuffer",
        "docs": "Creates a new framebuffer that allows painting into a widget.",
        "full_qualified_name": "draw.create_widget_framebuffer",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Framebuffer"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources",
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Framebuffer"
             }
            }
           }
          },
          "key": "draw_create_widget_framebuffer",
          "value": 57
         }
        }
       },
       {
        "name": "get_framebuffer_type",
        "docs": "Returns the type of a framebuffer object.",
        "full_qualified_name": "draw.get_framebuffer_type",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "FramebufferType"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "FramebufferType"
             }
            }
           }
          },
          "key": "draw_get_framebuffer_type",
          "value": 58
         }
        }
       },
       {
        "name": "get_framebuffer_size",
        "docs": "Returns the size of a framebuffer object.",
        "full_qualified_name": "draw.get_framebuffer_size",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Size"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Size"
             }
            }
           }
          },
          "key": "draw_get_framebuffer_size",
          "value": 59
         }
        }
       },
       {
        "name": "get_framebuffer_memory",
        "docs": "Returns the video memory for a *memory* framebuffer.",
        "full_qualified_name": "draw.get_framebuffer_memory",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "VideoMemory"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "Unsupported",
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "VideoMemory"
             }
            }
           }
          },
          "key": "draw_get_framebuffer_memory",
          "value": 60
         }
        }
       },
       {
        "name": "invalidate_framebuffer",
        "docs": "Marks a portion of the framebuffer as changed and forces the OS to",
        "full_qualified_name": "draw.invalidate_framebuffer",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            },
            {
             "name": "_param1",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Rectangle"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            },
            {
             "name": "_param1",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Rectangle"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "draw_invalidate_framebuffer",
          "value": 61
         }
        }
       },
       {
        "name": "Render",
        "docs": "\nNOTE: On machines without hardware acceleration, this syscall might be completed synchronously.",
        "full_qualified_name": "draw.Render",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "target",
             "docs": "The framebuffer which should be drawn to.",
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            },
            {
             "name": "sequence",
             "docs": "The AGP code that defines the drawing.",
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "auto_invalidate",
             "docs": "If the target framebuffer is invalidatable, it is automatically invalidated after the completion",
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            }
           ],
           "native": [
            {
             "name": "target",
             "docs": "The framebuffer which should be drawn to.",
             "type": {
              "ReferenceType": {
               "name": "Framebuffer"
              }
             }
            },
            {
             "name": "sequence_ptr",
             "docs": "The AGP code that defines the drawing.",
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "sequence_len",
             "docs": "Length of sequence_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "auto_invalidate",
             "docs": "If the target framebuffer is invalidatable, it is automatically invalidated after the completion",
             "type": {
              "ReferenceType": {
               "name": "bool"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [],
           "native": [],
           "annotations": []
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "BadCode",
             "InvalidHandle"
            ]
           }
          }
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "gui",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "register_widget_type",
        "docs": null,
        "full_qualified_name": "gui.register_widget_type",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "WidgetDescriptor"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "WidgetDescriptor"
                }
               }
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "WidgetType"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources",
               "AlreadyRegistered"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "WidgetType"
             }
            }
           }
          },
          "key": "gui_register_widget_type",
          "value": 62
         }
        }
       },
       {
        "name": "ShowMessageBox",
        "docs": "Opens a message box popup window and prompts the user for response.",
        "full_qualified_name": "gui.ShowMessageBox",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "message",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "caption",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "buttons",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "MessageBoxButtons"
              }
             }
            },
            {
             "name": "icon",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "MessageBoxIcon"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "message_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "message_len",
             "docs": "Length of message_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "caption_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "caption_len",
             "docs": "Length of caption_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "buttons",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "MessageBoxButtons"
              }
             }
            },
            {
             "name": "icon",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "MessageBoxIcon"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "result",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "MessageBoxResult"
              }
             }
            }
           ],
           "native": [
            {
             "name": "result",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "MessageBoxResult"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": []
           }
          }
         }
        }
       },
       {
        "name": "create_window",
        "docs": "Spawns a new window.",
        "full_qualified_name": "gui.create_window",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "desktop",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "title",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "min",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "max",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "startup",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "flags",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "CreateWindowFlags"
              }
             }
            }
           ],
           "native": [
            {
             "name": "desktop",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "title_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "title_len",
             "docs": "Length of title_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "min",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "max",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "startup",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "flags",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "CreateWindowFlags"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Window"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidDimensions",
               "SystemResources",
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Window"
             }
            }
           }
          },
          "key": "gui_create_window",
          "value": 63
         }
        }
       },
       {
        "name": "get_window_title",
        "docs": null,
        "full_qualified_name": "gui.get_window_title",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "out_title",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": true,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "out_title_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": true,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "out_title_len",
             "docs": "Length of out_title_ptr",
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "usize"
                }
               }
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "void"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": true,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "void"
             }
            }
           }
          },
          "key": "gui_get_window_title",
          "value": 64
         }
        }
       },
       {
        "name": "get_window_size",
        "docs": null,
        "full_qualified_name": "gui.get_window_size",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Size"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Size"
             }
            }
           }
          },
          "key": "gui_get_window_size",
          "value": 65
         }
        }
       },
       {
        "name": "get_window_min_size",
        "docs": null,
        "full_qualified_name": "gui.get_window_min_size",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Size"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Size"
             }
            }
           }
          },
          "key": "gui_get_window_min_size",
          "value": 66
         }
        }
       },
       {
        "name": "get_window_max_size",
        "docs": null,
        "full_qualified_name": "gui.get_window_max_size",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Size"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Size"
             }
            }
           }
          },
          "key": "gui_get_window_max_size",
          "value": 67
         }
        }
       },
       {
        "name": "get_window_flags",
        "docs": null,
        "full_qualified_name": "gui.get_window_flags",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "WindowFlags"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "WindowFlags"
             }
            }
           }
          },
          "key": "gui_get_window_flags",
          "value": 68
         }
        }
       },
       {
        "name": "set_window_size",
        "docs": "Sets the `size` of `window` and returns the new actual size.",
        "full_qualified_name": "gui.set_window_size",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Size"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Size"
             }
            }
           }
          },
          "key": "gui_set_window_size",
          "value": 69
         }
        }
       },
       {
        "name": "resize_window",
        "docs": "Resizes a window to the new size.",
        "full_qualified_name": "gui.resize_window",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "gui_resize_window",
          "value": 70
         }
        }
       },
       {
        "name": "set_window_title",
        "docs": "Changes a window title.",
        "full_qualified_name": "gui.set_window_title",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "title",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "title_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "title_len",
             "docs": "Length of title_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "gui_set_window_title",
          "value": 71
         }
        }
       },
       {
        "name": "mark_window_urgent",
        "docs": "Notifies the desktop that a window wants attention from the user.",
        "full_qualified_name": "gui.mark_window_urgent",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "gui_mark_window_urgent",
          "value": 72
         }
        }
       },
       {
        "name": "GetWindowEvent",
        "docs": "Waits for an event on the given `Window`, completing as soon as\nan event arrived.",
        "full_qualified_name": "gui.GetWindowEvent",
        "value": {
         "AsyncOp": {
          "inputs": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "outputs": {
           "abi": [
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WindowEvent"
              }
             }
            }
           ],
           "native": [
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WindowEvent"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "error": {
           "ErrorSet": {
            "errors": [
             "InProgress",
             "InvalidHandle",
             "Cancelled"
            ]
           }
          }
         }
        }
       },
       {
        "name": "create_widget",
        "docs": "Create a new widget identified by `uuid` on the given `window`.",
        "full_qualified_name": "gui.create_widget",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "uuid",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "UUID"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "uuid",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "UUID"
                }
               }
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Widget"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "WidgetNotFound",
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Widget"
             }
            }
           }
          },
          "key": "gui_create_widget",
          "value": 73
         }
        }
       },
       {
        "name": "place_widget",
        "docs": "Moves and resizes a widget in one.",
        "full_qualified_name": "gui.place_widget",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "widget",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            },
            {
             "name": "position",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Point"
              }
             }
            },
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            }
           ],
           "native": [
            {
             "name": "widget",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            },
            {
             "name": "position",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Point"
              }
             }
            },
            {
             "name": "size",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Size"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "void"
           }
          },
          "key": "gui_place_widget",
          "value": 74
         }
        }
       },
       {
        "name": "control_widget",
        "docs": "Triggers the `control` event of the widget with the given `message` as a payload.",
        "full_qualified_name": "gui.control_widget",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "widget",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            },
            {
             "name": "message",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WidgetControlMessage"
              }
             }
            }
           ],
           "native": [
            {
             "name": "widget",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            },
            {
             "name": "message",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WidgetControlMessage"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ErrorSet": {
            "errors": [
             "SystemResources"
            ]
           }
          },
          "key": "gui_control_widget",
          "value": 75
         }
        }
       },
       {
        "name": "notify_owner",
        "docs": "Triggers the `widget_notify` event of the `Window` that owns `widget` with `event` as the payload.",
        "full_qualified_name": "gui.notify_owner",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "widget",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            },
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WidgetNotifyEvent"
              }
             }
            }
           ],
           "native": [
            {
             "name": "widget",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            },
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WidgetNotifyEvent"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ErrorSet": {
            "errors": [
             "SystemResources"
            ]
           }
          },
          "key": "gui_notify_owner",
          "value": 76
         }
        }
       },
       {
        "name": "get_widget_data",
        "docs": "Returns WidgetType-associated \"opaque\" data for this widget.",
        "full_qualified_name": "gui.get_widget_data",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Widget"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": 16,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          },
          "key": "gui_get_widget_data",
          "value": 77
         }
        }
       },
       {
        "name": "create_desktop",
        "docs": "Creates a new desktop with the given name.",
        "full_qualified_name": "gui.create_desktop",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "name",
             "docs": "User-visible name of the desktop.",
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "descriptor",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "DesktopDescriptor"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "name_ptr",
             "docs": "User-visible name of the desktop.",
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "name_len",
             "docs": "Length of name_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "descriptor",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "DesktopDescriptor"
                }
               }
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Desktop"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Desktop"
             }
            }
           }
          },
          "key": "gui_create_desktop",
          "value": 78
         }
        }
       },
       {
        "name": "get_desktop_name",
        "docs": "Returns the name of the provided desktop.",
        "full_qualified_name": "gui.get_desktop_name",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "0",
                 "const": true,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "PointerType": {
              "size": "[*]",
              "sentinel": "0",
              "const": true,
              "volatile": false,
              "alignment": null,
              "inner": {
               "ReferenceType": {
                "name": "u8"
               }
              }
             }
            }
           }
          },
          "key": "gui_get_desktop_name",
          "value": 79
         }
        }
       },
       {
        "name": "enumerate_desktops",
        "docs": "Enumerates all available desktops.",
        "full_qualified_name": "gui.enumerate_desktops",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "serverlist",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "serverlist_ptr",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "serverlist_len",
             "docs": "Length of serverlist_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": true,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "gui_enumerate_desktops",
          "value": 80
         }
        }
       },
       {
        "name": "enumerate_desktop_windows",
        "docs": "Returns all windows for a desktop handle.",
        "full_qualified_name": "gui.enumerate_desktop_windows",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "window",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Window"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "window_ptr",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Window"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "window_len",
             "docs": "Length of window_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "usize"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": true,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "usize"
             }
            }
           }
          },
          "key": "gui_enumerate_desktop_windows",
          "value": 81
         }
        }
       },
       {
        "name": "get_desktop_data",
        "docs": "Returns desktop-associated \"opaque\" data for this window.",
        "full_qualified_name": "gui.get_desktop_data",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": 16,
                 "inner": {
                  "ReferenceType": {
                   "name": "u8"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "PointerType": {
              "size": "[*]",
              "sentinel": "None",
              "const": false,
              "volatile": false,
              "alignment": 16,
              "inner": {
               "ReferenceType": {
                "name": "u8"
               }
              }
             }
            }
           }
          },
          "key": "gui_get_desktop_data",
          "value": 82
         }
        }
       },
       {
        "name": "notify_message_box",
        "docs": "Notifies the system that a message box was confirmed by the user.",
        "full_qualified_name": "gui.notify_message_box",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "source",
             "docs": "The desktop that completed the message box.",
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "request_id",
             "docs": "The request id that was passed in `MessageBoxEvent`.",
             "type": {
              "ReferenceType": {
               "name": "MessageBoxEvent.RequestID"
              }
             }
            },
            {
             "name": "result",
             "docs": "The resulting button which the user clicked.",
             "type": {
              "ReferenceType": {
               "name": "MessageBoxResult"
              }
             }
            }
           ],
           "native": [
            {
             "name": "source",
             "docs": "The desktop that completed the message box.",
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "request_id",
             "docs": "The request id that was passed in `MessageBoxEvent`.",
             "type": {
              "ReferenceType": {
               "name": "MessageBoxEvent.RequestID"
              }
             }
            },
            {
             "name": "result",
             "docs": "The resulting button which the user clicked.",
             "type": {
              "ReferenceType": {
               "name": "MessageBoxResult"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "void"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "BadRequestId",
               "InvalidHandle"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "void"
             }
            }
           }
          },
          "key": "gui_notify_message_box",
          "value": 83
         }
        }
       },
       {
        "name": "post_window_event",
        "docs": "Posts an event into the window event queue so the window owner",
        "full_qualified_name": "gui.post_window_event",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WindowEvent"
              }
             }
            }
           ],
           "native": [
            {
             "name": "window",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Window"
              }
             }
            },
            {
             "name": "event",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "WindowEvent"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ErrorSet": {
            "errors": [
             "SystemResources",
             "InvalidHandle"
            ]
           }
          },
          "key": "gui_post_window_event",
          "value": 84
         }
        }
       },
       {
        "name": "send_notification",
        "docs": "Sends a notification to the provided `desktop`.",
        "full_qualified_name": "gui.send_notification",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "desktop",
             "docs": "Where to show the notification?",
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "message",
             "docs": "What text is displayed in the notification?",
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "severity",
             "docs": "How urgent is the notification to the user?",
             "type": {
              "ReferenceType": {
               "name": "NotificationSeverity"
              }
             }
            }
           ],
           "native": [
            {
             "name": "desktop",
             "docs": "Where to show the notification?",
             "type": {
              "ReferenceType": {
               "name": "Desktop"
              }
             }
            },
            {
             "name": "message_ptr",
             "docs": "What text is displayed in the notification?",
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "message_len",
             "docs": "Length of message_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "severity",
             "docs": "How urgent is the notification to the user?",
             "type": {
              "ReferenceType": {
               "name": "NotificationSeverity"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ErrorSet": {
            "errors": [
             "SystemResources",
             "InvalidHandle"
            ]
           }
          },
          "key": "gui_send_notification",
          "value": 85
         }
        }
       },
       {
        "name": "clipboard",
        "docs": null,
        "full_qualified_name": null,
        "value": {
         "Namespace": {
          "decls": [
           {
            "name": "set",
            "docs": "Sets the contents of the clip board.",
            "full_qualified_name": "gui.clipboard.set",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "desktop",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                },
                {
                 "name": "mime",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "value",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "desktop",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                },
                {
                 "name": "mime_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "mime_len",
                 "docs": "Length of mime_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "value_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "value_len",
                 "docs": "Length of value_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ErrorSet": {
                "errors": [
                 "SystemResources"
                ]
               }
              },
              "key": "gui_clipboard_set",
              "value": 86
             }
            }
           },
           {
            "name": "get_type",
            "docs": "Returns the current type present in the clipboard, if any.",
            "full_qualified_name": "gui.clipboard.get_type",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "desktop",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "desktop",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "OptionalType": {
                "inner": {
                 "PointerType": {
                  "size": "[*]",
                  "sentinel": "0",
                  "const": true,
                  "volatile": false,
                  "alignment": null,
                  "inner": {
                   "ReferenceType": {
                    "name": "u8"
                   }
                  }
                 }
                }
               }
              },
              "key": "gui_clipboard_get_type",
              "value": 87
             }
            }
           },
           {
            "name": "get_value",
            "docs": "Returns the current clipboard value as the provided mime type.",
            "full_qualified_name": "gui.clipboard.get_value",
            "value": {
             "Function": {
              "params": {
               "abi": [
                {
                 "name": "desktop",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                },
                {
                 "name": "mime",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "value",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "*",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "OptionalType": {
                     "inner": {
                      "PointerType": {
                       "size": "[]",
                       "sentinel": "None",
                       "const": true,
                       "volatile": false,
                       "alignment": null,
                       "inner": {
                        "ReferenceType": {
                         "name": "u8"
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               ],
               "native": [
                {
                 "name": "desktop",
                 "docs": null,
                 "type": {
                  "ReferenceType": {
                   "name": "Desktop"
                  }
                 }
                },
                {
                 "name": "mime_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "[*]",
                   "sentinel": "None",
                   "const": true,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "u8"
                    }
                   }
                  }
                 }
                },
                {
                 "name": "mime_len",
                 "docs": "Length of mime_ptr",
                 "type": {
                  "ReferenceType": {
                   "name": "usize"
                  }
                 }
                },
                {
                 "name": "value_ptr",
                 "docs": null,
                 "type": {
                  "PointerType": {
                   "size": "*",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "OptionalType": {
                     "inner": {
                      "PointerType": {
                       "size": "[*]",
                       "sentinel": "None",
                       "const": true,
                       "volatile": false,
                       "alignment": null,
                       "inner": {
                        "ReferenceType": {
                         "name": "u8"
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                {
                 "name": "value_len",
                 "docs": "Length of value_ptr",
                 "type": {
                  "PointerType": {
                   "size": "*",
                   "sentinel": "None",
                   "const": false,
                   "volatile": false,
                   "alignment": null,
                   "inner": {
                    "ReferenceType": {
                     "name": "usize"
                    }
                   }
                  }
                 }
                }
               ],
               "annotations": [
                {
                 "is_slice": false,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": false,
                 "is_out": false,
                 "technical": false
                },
                {
                 "is_slice": true,
                 "is_optional": true,
                 "is_out": true,
                 "technical": false
                }
               ]
              },
              "abi_return_type": {
               "ErrorSet": {
                "errors": [
                 "OutOfMemory",
                 "ConversionFailed"
                ]
               }
              },
              "key": "gui_clipboard_get_value",
              "value": 88
             }
            }
           }
          ]
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "service",
    "docs": null,
    "full_qualified_name": null,
    "value": {
     "Namespace": {
      "decls": [
       {
        "name": "create",
        "docs": "Registers a new service `uuid` in the system.",
        "full_qualified_name": "service.create",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "uuid",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "UUID"
                }
               }
              }
             }
            },
            {
             "name": "funcs",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "AbstractFunction"
                }
               }
              }
             }
            },
            {
             "name": "name",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "uuid",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "UUID"
                }
               }
              }
             }
            },
            {
             "name": "funcs_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "AbstractFunction"
                }
               }
              }
             }
            },
            {
             "name": "funcs_len",
             "docs": "Length of funcs_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "name_ptr",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "[*]",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "u8"
                }
               }
              }
             }
            },
            {
             "name": "name_len",
             "docs": "Length of name_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            },
            {
             "name": "__return_value",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": false,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "Service"
                }
               }
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": true
            }
           ]
          },
          "abi_return_type": {
           "ErrorUnion": {
            "error": {
             "ErrorSet": {
              "errors": [
               "SystemResources",
               "AlreadyRegistered"
              ]
             }
            },
            "result": {
             "ReferenceType": {
              "name": "Service"
             }
            }
           }
          },
          "key": "service_create",
          "value": 89
         }
        }
       },
       {
        "name": "enumerate",
        "docs": "Enumerates all registered services.",
        "full_qualified_name": "service.enumerate",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "uuid",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "UUID"
                }
               }
              }
             }
            },
            {
             "name": "services",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Service"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "uuid",
             "docs": null,
             "type": {
              "PointerType": {
               "size": "*",
               "sentinel": "None",
               "const": true,
               "volatile": false,
               "alignment": null,
               "inner": {
                "ReferenceType": {
                 "name": "UUID"
                }
               }
              }
             }
            },
            {
             "name": "services_ptr",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "Service"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "services_len",
             "docs": "Length of services_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "service_enumerate",
          "value": 90
         }
        }
       },
       {
        "name": "get_name",
        "docs": "Returns the name of the service.",
        "full_qualified_name": "service.get_name",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Service"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Service"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "0",
            "const": true,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          },
          "key": "service_get_name",
          "value": 91
         }
        }
       },
       {
        "name": "get_process",
        "docs": "Returns the process that created this service.",
        "full_qualified_name": "service.get_process",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Service"
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Service"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "Process"
           }
          },
          "key": "service_get_process",
          "value": 92
         }
        }
       },
       {
        "name": "get_functions",
        "docs": "Returns the functions registerd by the service.",
        "full_qualified_name": "service.get_functions",
        "value": {
         "Function": {
          "params": {
           "abi": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Service"
              }
             }
            },
            {
             "name": "funcs",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "AbstractFunction"
                  }
                 }
                }
               }
              }
             }
            }
           ],
           "native": [
            {
             "name": "_param0",
             "docs": null,
             "type": {
              "ReferenceType": {
               "name": "Service"
              }
             }
            },
            {
             "name": "funcs_ptr",
             "docs": null,
             "type": {
              "OptionalType": {
               "inner": {
                "PointerType": {
                 "size": "[*]",
                 "sentinel": "None",
                 "const": false,
                 "volatile": false,
                 "alignment": null,
                 "inner": {
                  "ReferenceType": {
                   "name": "AbstractFunction"
                  }
                 }
                }
               }
              }
             }
            },
            {
             "name": "funcs_len",
             "docs": "Length of funcs_ptr",
             "type": {
              "ReferenceType": {
               "name": "usize"
              }
             }
            }
           ],
           "annotations": [
            {
             "is_slice": false,
             "is_optional": false,
             "is_out": false,
             "technical": false
            },
            {
             "is_slice": true,
             "is_optional": true,
             "is_out": false,
             "technical": false
            }
           ]
          },
          "abi_return_type": {
           "ReferenceType": {
            "name": "usize"
           }
          },
          "key": "service_get_functions",
          "value": 93
         }
        }
       }
      ]
     }
    }
   },
   {
    "name": "Service",
    "docs": null,
    "full_qualified_name": "Service",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "SharedMemory",
    "docs": null,
    "full_qualified_name": "SharedMemory",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Pipe",
    "docs": null,
    "full_qualified_name": "Pipe",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Process",
    "docs": null,
    "full_qualified_name": "Process",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Thread",
    "docs": null,
    "full_qualified_name": "Thread",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "TcpSocket",
    "docs": null,
    "full_qualified_name": "TcpSocket",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "UdpSocket",
    "docs": null,
    "full_qualified_name": "UdpSocket",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "File",
    "docs": null,
    "full_qualified_name": "File",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Directory",
    "docs": null,
    "full_qualified_name": "Directory",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "VideoOutput",
    "docs": null,
    "full_qualified_name": "VideoOutput",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Font",
    "docs": null,
    "full_qualified_name": "Font",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Framebuffer",
    "docs": "A framebuffer is something that can be drawn on.",
    "full_qualified_name": "Framebuffer",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Window",
    "docs": null,
    "full_qualified_name": "Window",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Widget",
    "docs": null,
    "full_qualified_name": "Widget",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Desktop",
    "docs": null,
    "full_qualified_name": "Desktop",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "WidgetType",
    "docs": null,
    "full_qualified_name": "WidgetType",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "SyncEvent",
    "docs": null,
    "full_qualified_name": "SyncEvent",
    "value": {
     "SystemResource": {}
    }
   },
   {
    "name": "Mutex",
    "docs": null,
    "full_qualified_name": "Mutex",
    "value": {
     "SystemResource": {}
    }
   }
  ],
  "rest": " // regular code beyond this\n\n// pub const ARC = extern struct {\n//     type: ARC_Type,\n//     next: ?*ARC,\n//     tag: usize, // user specified data\n\n//     kernel_data: [7]usize = undefined, // internal data used by the kernel to store\n// };\n\n/// Constructor for a generic, ABI passable error set.\npub const ErrorSet = @import(\"error_set\").ErrorSet;\n\n/// Asynchronous operations (short AOP) are long-running\n/// operations that can run in the background (at least to\n/// a certain extend) and can be seen as long-running system\n/// calls.\npub const ARC = @import(\"async_running_call\").Generic_ARC(ARC_Type);\n\npub const platforms = @import(\"platforms\");\n\npub const Platform = platforms.Platform;\n///////////////////////////////////////////////////////////\n// Imports:\n\nconst std = @import(\"std\");\nconst abi = @This();\n\n///////////////////////////////////////////////////////////\n// Constants:\n\n/// The maximum number of bytes in a file system identifier name.\n/// This is chosen to be a power of two, and long enough to accommodate\n/// typical file system names:\n/// - `SYS`\n/// - `USB0`\n/// - `USB10`\n/// - `PF0`\n/// - `CF7`\npub const max_fs_name_len = 8;\n\n/// The maximum number of bytes in a file system type name.\n/// Chosen to be a power of two, and long enough to accomodate typical names:\n/// - `FAT16`\n/// - `FAT32`\n/// - `exFAT`\n/// - `NTFS`\n/// - `ReiserFS`\n/// - `ISO 9660`\n/// - `btrfs`\n/// - `AFFS`\npub const max_fs_type_len = 32;\n\n/// The maximum number of bytes in a file name.\n/// This is chosen to be a power of two, and reasonably long.\n/// As some programs use sha256 checksums and 64 bytes are enough to store\n/// a hex-encoded 256 bit sequence:\n/// - `114ac2caf8fefad1116dbfb1bd68429f68e9e088b577c9b3f5a3ff0fe77ec886`\n/// This should also enough for most reasonable file names in the wild.\npub const max_file_name_len = 120;\n\n///////////////////////////////////////////////////////////\n// System resources:\n\n/// Handle to an abstract system resource.\npub const SystemResource = enum(usize) {\n    _,\n\n    /// Casts the resource into a concrete type. Fails, if the type does not match.\n    pub fn cast(resource: SystemResource, comptime t: Type) error{ InvalidHandle, InvalidType }!CastResult(t) {\n        var actual: Type = undefined;\n        if (resources.get_type(resource, &actual) != .ok)\n            return error.InvalidHandle;\n        if (actual != t)\n            return error.InvalidType;\n        return resource.unsafe_cast(t);\n    }\n\n    /// Casts the resource into a concrete type. Fails, if the type does not match.\n    pub fn unsafe_cast(resource: SystemResource, comptime t: Type) CastResult(t) {\n        return @ptrFromInt(@intFromEnum(resource));\n    }\n\n    fn CastResult(comptime t: Type) type {\n        return __SystemResourceCastResult(t);\n    }\n\n    pub const Type = __SystemResourceType;\n\n    pub fn format(src: SystemResource, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = options;\n        if (fmt.len == 1 and fmt[0] == 'T') {\n            var src_type: Type = undefined;\n            if (resources.get_type(src, &src_type) == .ok) {\n                try writer.print(\"SystemResource(0x{X:0>8}, type={s})\", .{ @intFromEnum(src), @tagName(src_type) });\n            } else {\n                try writer.print(\"SystemResource(0x{X:0>8}, bad handle)\", .{@intFromEnum(src)});\n            }\n        } else {\n            try writer.print(\"SystemResource(0x{X:0>8})\", .{@intFromEnum(src)});\n        }\n    }\n};\n\n///////////////////////////////////////////////////////////\n// Simple types:\n\npub const UUID = extern struct {\n    bytes: [16]u8,\n\n    /// Parses a UUID in the format\n    /// `3ad20402-1711-4bbc-b6c3-ff8a1da068c6`\n    /// and returns a pointer to it.\n    ///\n    /// You can generate UUIDs at\n    /// https://www.uuidgenerator.net/version4\n    pub fn constant(str: *const [36:0]u8) *const UUID {\n        _ = str;\n        unreachable;\n    }\n};\n\npub const MAC = [6]u8;\n\npub const AbstractFunction = *const fn () callconv(.C) void;\n\npub const ThreadFunction = *const fn (?*anyopaque) callconv(.C) u32;\n\n/// A date-and-time type encoding the time point in question as a\n/// Unix timestamp in milliseconds\npub const DateTime = enum(i64) {\n    /// 1970-01-01 00:00\n    epoch = 0,\n\n    _,\n\n    pub fn as_unix_timestamp_ms(dt: DateTime) i64 {\n        return @intFromEnum(dt);\n    }\n\n    pub fn as_unix_timestamp_s(dt: DateTime) i64 {\n        return @divTrunc(@intFromEnum(dt), std.time.ms_per_s);\n    }\n\n    pub fn lt(a: DateTime, b: DateTime) bool {\n        return @intFromEnum(a) < @intFromEnum(b);\n    }\n\n    pub fn gt(a: DateTime, b: DateTime) bool {\n        return @intFromEnum(a) > @intFromEnum(b);\n    }\n};\n\n/// Time in nanoseconds since system startup.\npub const Absolute = enum(u64) {\n    system_start = 0,\n\n    _,\n\n    /// Returns the time between `newer` and `older`.\n    ///\n    /// NOTE: Asserts that `newer` happened after `older`.\n    pub fn time_since(newer: Absolute, older: Absolute) Duration {\n        return Duration.from_ns(\n            @intFromEnum(newer) - @intFromEnum(older),\n        );\n    }\n\n    /// Returns the nanoseconds since system startup.\n    pub fn ns_since_start(point: Absolute) u64 {\n        return @intFromEnum(point);\n    }\n\n    /// Returns the microseconds since system startup.\n    pub fn us_since_start(point: Absolute) u64 {\n        return @intFromEnum(point) / std.time.us_per_ms;\n    }\n\n    /// Returns the milliseconds since system startup.\n    pub fn ms_since_start(point: Absolute) u64 {\n        return @intFromEnum(point) / std.time.ns_per_ms;\n    }\n\n    /// Increments the time point by `delta`.\n    pub fn increment_by(abs: Absolute, delta: Duration) Absolute {\n        return @enumFromInt(@intFromEnum(abs) + @intFromEnum(delta));\n    }\n\n    pub fn lt(a: Absolute, b: Absolute) bool {\n        return @intFromEnum(a) < @intFromEnum(b);\n    }\n\n    pub fn gt(a: Absolute, b: Absolute) bool {\n        return @intFromEnum(a) > @intFromEnum(b);\n    }\n};\n\n/// A duration in nanoseconds.\npub const Duration = enum(u64) {\n    _,\n\n    /// Constructs a duration from a nanosecond time span.\n    pub fn from_ns(ns: u64) Duration {\n        return @enumFromInt(ns);\n    }\n\n    /// Constructs a duration from a microsecond time span.\n    pub fn from_us(us: u64) Duration {\n        return @enumFromInt(us * std.time.ns_per_us);\n    }\n\n    /// Constructs a duration from a millisecond time span.\n    pub fn from_ms(ms: u64) Duration {\n        return @enumFromInt(ms * std.time.ns_per_ms);\n    }\n\n    /// Returns the duration in nanoseconds.\n    pub fn to_ns(dur: Duration) u64 {\n        return @intFromEnum(dur);\n    }\n\n    /// Returns the duration in microseconds.\n    pub fn to_us(dur: Duration) u64 {\n        return @intFromEnum(dur) / std.time.ns_per_us;\n    }\n\n    /// Returns the duration in milliseconds.\n    pub fn to_ms(dur: Duration) u64 {\n        return @intFromEnum(dur) / std.time.ns_per_ms;\n    }\n\n    pub fn lt(a: Duration, b: Duration) bool {\n        return @intFromEnum(a) < @intFromEnum(b);\n    }\n\n    pub fn gt(a: Duration, b: Duration) bool {\n        return @intFromEnum(a) > @intFromEnum(b);\n    }\n\n    pub fn format(dur: Duration, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = options;\n        const ns = dur.to_ns();\n\n        const Scale = struct {\n            unit: []const u8,\n            divider: u64,\n        };\n\n        const scales = [_]Scale{\n            .{ .unit = \"week\", .divider = std.time.ns_per_week },\n            .{ .unit = \"d\", .divider = std.time.ns_per_day },\n            .{ .unit = \"m\", .divider = std.time.ns_per_min },\n            .{ .unit = \"h\", .divider = std.time.ns_per_hour },\n            .{ .unit = \"s\", .divider = std.time.ns_per_s },\n            .{ .unit = \"ms\", .divider = std.time.ns_per_ms },\n            .{ .unit = \"us\", .divider = std.time.ns_per_us },\n            .{ .unit = \"ns\", .divider = 1 },\n        };\n\n        const selected_scale: Scale = if (fmt.len > 0)\n            comptime for (scales) |scale| {\n                if (std.mem.eql(u8, scale.unit, fmt))\n                    break scale;\n            } else @compileError(fmt ++ \" is not a valid duration unit!\")\n        else for (scales) |scale| {\n            if (ns >= scale.divider)\n                break scale;\n        } else scales[0];\n\n        const int_part = ns / selected_scale.divider;\n        if (selected_scale.divider > 1) {\n            const fract_part = ns % (1000 * selected_scale.divider);\n            try writer.print(\"{d}.{d:0>3} {s}\", .{ int_part, fract_part, selected_scale.unit });\n        } else {\n            try writer.print(\"{d} {s}\", .{ int_part, selected_scale.unit });\n        }\n    }\n};\n\n///////////////////////////////////////////////////////////\n// Enumerations:\n\npub const PipeMode = enum(u8) {\n    /// Completes immediatly even if no elements could be processed.\n    nonblocking = 0,\n    /// Returns when at least one element could be processed.\n    at_least_one = 1,\n    /// Returns only when all elements are processed.\n    all = 2,\n};\n\npub const NotificationSeverity = enum(u8) {\n    /// Important information that require immediate action\n    /// by the user.\n    ///\n    /// This should be handled with care and only for reall\n    /// urgent situations like low battery power or\n    /// unsufficient disk memory.\n    attention = 0,\n\n    /// This is a regular user notification, which should be used\n    /// sparingly.\n    ///\n    /// Typical notifications of this kind are in the category of\n    /// \"download completed\", \"video fully rendered\" or similar.\n    information = 128,\n\n    /// Silent notifications that might be informational, but do not\n    /// require attention by the user at all.\n    whisper = 255,\n};\n\npub const IP_Type = enum(u8) { ipv4, ipv6 };\n\npub const Schedule_Result = enum(u8) {\n    scheduled = 0,\n};\n\npub const Await_Options = extern struct {\n    wait: Wait,\n    thread_affinity: Thread_Affinity,\n\n    pub const Thread_Affinity = enum(u8) {\n        /// Waits for ARCs scheduled from *any* thread in the current process.\n        all_threads,\n\n        /// Waits for ARCs scheduled from *this* thread.\n        this_thread,\n    };\n\n    pub const Wait = enum(u8) {\n        /// Don't wait for any additional calls to complete, just return\n        /// whatever was completed in the meantime.\n        dont_block = 0,\n\n        /// Wait for at least a single call to complete operation.\n        wait_one = 1,\n\n        /// Wait until all scheduled operations have completed.\n        ///\n        /// This will only wait so long until either\n        /// a) all scheduled ops are stored into the result array\n        /// or\n        /// b) the result array is full\n        ///\n        /// NOTE: If `thread_affinity` is `.all_threads`, other threads can still\n        ///       schedule more operations and make this function block longer.\n        wait_all = 2,\n\n        /// Returns whether the operation is blocking or not.\n        pub fn isBlocking(wait: Wait) bool {\n            return switch (wait) {\n                .dont_block => false,\n                .wait_one => true,\n                .wait_all => true,\n            };\n        }\n    };\n};\n\n/// Index of the systems video outputs.\npub const VideoOutputID = enum(u8) {\n    /// The primary video output\n    primary = 0,\n    _,\n};\n\npub const FontType = enum(u32) {\n    bitmap = 0,\n    vector = 1,\n    _,\n};\n\npub const FramebufferType = enum(u8) {\n    /// A pure in-memory frame buffer used for off-screen rendering.\n    memory = 0,\n\n    /// A video device backed frame buffer. Can be used to paint on a screen\n    /// directly.\n    video = 1,\n\n    /// A frame buffer provided by a window. These frame buffers\n    /// may hold additional semantic information.\n    window = 2,\n\n    /// A frame buffer provided by a user interface element. These frame buffers\n    /// may hold additional semantic information.\n    widget = 3,\n};\n\npub const MessageBoxIcon = enum(u8) {\n    information = 0,\n    question = 1,\n    warning = 2,\n    @\"error\" = 3,\n};\n\npub const MessageBoxResult = enum(u8) {\n    ok = @bitOffsetOf(MessageBoxButtons, \"has_ok\"),\n    cancel = @bitOffsetOf(MessageBoxButtons, \"has_cancel\"),\n    yes = @bitOffsetOf(MessageBoxButtons, \"has_yes\"),\n    no = @bitOffsetOf(MessageBoxButtons, \"has_no\"),\n    abort = @bitOffsetOf(MessageBoxButtons, \"has_abort\"),\n    retry = @bitOffsetOf(MessageBoxButtons, \"has_retry\"),\n    @\"continue\" = @bitOffsetOf(MessageBoxButtons, \"has_continue\"),\n    ignore = @bitOffsetOf(MessageBoxButtons, \"has_ignore\"),\n};\n\npub const ExitCode = enum(u32) {\n    success = @as(u32, 0),\n    failure = @as(u32, 1),\n\n    killed = ~@as(u32, 0),\n\n    _,\n};\n\npub const LogLevel = enum(u8) {\n    critical = 0,\n    err = 1,\n    warn = 2,\n    notice = 3,\n    debug = 4,\n};\n\npub const FileSystemId = enum(u32) {\n    /// This is the file system which the os has bootet from.\n    system = 0,\n\n    /// the filesystem isn't valid.\n    invalid = ~@as(u32, 0),\n\n    /// All other ids are unique file systems.\n    _,\n};\n\npub const FileAttributes = packed struct(u16) {\n    directory: bool,\n    reserved: u15 = 0,\n};\n\npub const FileAccess = enum(u8) {\n    read_only = 0,\n    write_only = 1,\n    read_write = 2,\n};\n\npub const FileMode = enum(u8) {\n    open_existing = 0, // opens file when it exists on disk\n    open_always = 1, // creates file when it does not exist, or opens the file without truncation.\n    create_new = 2, // creates file when there is no file with that name\n    create_always = 3, // creates file when it does not exist, or opens the file and truncates it to zero length\n};\n\npub const KeyCode = enum(u16) {\n    escape = 1,\n    @\"1\",\n    @\"2\",\n    @\"3\",\n    @\"4\",\n    @\"5\",\n    @\"6\",\n    @\"7\",\n    @\"8\",\n    @\"9\",\n    @\"0\",\n    minus,\n    equal,\n    backspace,\n    tab,\n    q,\n    w,\n    e,\n    r,\n    t,\n    y,\n    u,\n    i,\n    o,\n    p,\n    left_brace,\n    right_brace,\n    @\"return\",\n    ctrl_left,\n    a,\n    s,\n    d,\n    f,\n    g,\n    h,\n    j,\n    k,\n    l,\n    semicolon,\n    apostrophe,\n    grave,\n    shift_left,\n    backslash,\n    z,\n    x,\n    c,\n    v,\n    b,\n    n,\n    m,\n    comma,\n    dot,\n    slash,\n    shift_right,\n    kp_asterisk,\n    alt,\n    space,\n    caps_lock,\n    f1,\n    f2,\n    f3,\n    f4,\n    f5,\n    f6,\n    f7,\n    f8,\n    f9,\n    f10,\n    num_lock,\n    scroll_lock,\n    kp_7,\n    kp_8,\n    kp_9,\n    kp_minus,\n    kp_4,\n    kp_5,\n    kp_6,\n    kp_plus,\n    kp_1,\n    kp_2,\n    kp_3,\n    kp_0,\n    kp_dot,\n    jp_zenkakuhankaku,\n    @\"102nd\",\n    f11,\n    f12,\n    jp_ro,\n    jp_katakana,\n    jp_hiragana,\n    jp_henkan,\n    jp_katakana_hiragana,\n    jp_muhenkan,\n    jp_kp_comma,\n    kp_enter,\n    ctrl_right,\n    kp_slash,\n    print,\n    alt_graph,\n    linefeed,\n    home,\n    up,\n    page_up,\n    left,\n    right,\n    end,\n    down,\n    page_down,\n    insert,\n    delete,\n    meta,\n\n    unknown = 0xFFFF,\n};\n\npub const MouseButton = enum(u8) {\n    none = 0,\n    left = 1,\n    right = 2,\n    middle = 3,\n    nav_previous = 4,\n    nav_next = 5,\n    wheel_down = 6,\n    wheel_up = 7,\n};\n\n///////////////////////////////////////////////////////////\n// Compound types:\n\npub const SpawnProcessArg = struct {\n    /// Creates a new SpawnProcessArg that is a string.\n    pub fn string(text: []const u8) SpawnProcessArg {\n        return .{ .type = .string, .value = .{ .text = String.new(text) } };\n    }\n\n    /// Creates a new SpawnProcessArg that refers to a resource.\n    pub fn resource(handle: SystemResource) SpawnProcessArg {\n        return .{ .type = .resource, .value = .{ .resource = handle } };\n    }\n\n    type: Type,\n    value: extern union {\n        text: String,\n        resource: SystemResource,\n    },\n\n    pub const Type = enum(u8) {\n        string = 0,\n        resource = 1,\n    };\n\n    pub const String = extern struct {\n        ptr: [*]const u8,\n        len: usize,\n\n        pub fn new(_slice: []const u8) String {\n            return .{ .ptr = _slice.ptr, .len = _slice.len };\n        }\n\n        pub fn slice(str: String) []const u8 {\n            return str.ptr[0..str.len];\n        }\n    };\n};\n\npub const WindowFlags = packed struct(u32) {\n    popup: bool,\n    resizable: bool,\n    padding: u30 = 0,\n};\n\npub const CreateWindowFlags = packed struct(u32) {\n    popup: bool = false,\n    padding: u31 = 0,\n};\n\npub const WidgetDescriptor = extern struct {\n    uuid: UUID,\n\n    /// Number of bytes allocated in a Widget for this widget type.\n    /// See `get_widget_data` function for further information.\n    data_size: usize,\n\n    flags: Flags,\n\n    // TODO: Fill this out\n\n    // Event Handlers:\n\n    handle_event: *const fn (Widget, *const WidgetEvent) callconv(.C) void,\n\n    pub const Flags = packed struct(u32) {\n        /// If `true`, the user can focus this widget with the mouse or keyboard.\n        focusable: bool,\n\n        /// If `true`, the user is able to open a context menu on this.\n        context_menu: bool,\n\n        /// If `true`, this widget is able to receive events with the mouse.\n        /// If `false`, the widget is ignored in the position-to-widget resolution.\n        hit_test_visible: bool,\n\n        /// If `true`, the user is able to potentially drop data via Drag&Drop\n        /// on this widget.\n        allow_drop: bool,\n\n        /// If `true`, the user can copy/cut/paste data from/into this widget.\n        clipboard_sensitive: bool,\n\n        _padding: u27 = 0,\n    };\n};\n\npub const WidgetControlMessage = extern struct {\n    event_type: WidgetEvent.Type,\n\n    /// The widget-specific type of the control message.\n    /// Could be something like `get_property`, `set_property`, `set_text`, ...\n    type: u32,\n\n    /// Generic parameters that can be passed to the widget.\n    params: [4]usize,\n};\n\npub const WidgetNotifyEvent = extern struct {\n    event_type: WindowEvent.Type,\n\n    widget: Widget,\n\n    /// The widget-specific type of event.\n    /// Could be something like `text_changed`, `clicked`, `checked_changed`, ...\n    type: u32,\n\n    /// Generic data associated with the event.\n    data: [4]usize,\n};\n\npub const MessageBoxButtons = packed struct(u8) {\n    pub const ok: MessageBoxButtons = .{ .has_ok = true };\n    pub const ok_cancel: MessageBoxButtons = .{ .has_ok = true, .has_cancel = true };\n    pub const yes_no: MessageBoxButtons = .{ .has_yes = true, .has_no = true };\n    pub const yes_no_cancel: MessageBoxButtons = .{ .has_yes = true, .has_no = true, .has_cancel = true };\n    pub const retry_cancel: MessageBoxButtons = .{ .has_retry = true, .has_cancel = true };\n    pub const abort_retry_ignore: MessageBoxButtons = .{ .has_abort = true, .has_retry = true, .has_ignore = true };\n\n    has_ok: bool = false,\n    has_cancel: bool = false,\n    has_yes: bool = false,\n    has_no: bool = false,\n    has_abort: bool = false,\n    has_retry: bool = false,\n    has_continue: bool = false,\n    has_ignore: bool = false,\n\n    pub fn format(buttons: MessageBoxButtons, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = options;\n        const max_length = comptime \"ok,cancel,yes,no,abort,retry,continue,ignore\".len;\n\n        var buffer: [max_length]u8 = undefined;\n        var stream = std.io.fixedBufferStream(&buffer);\n\n        if (buttons.has_ok) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"ok\") catch unreachable;\n        }\n        if (buttons.has_cancel) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"cancel\") catch unreachable;\n        }\n        if (buttons.has_yes) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"yes\") catch unreachable;\n        }\n        if (buttons.has_no) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"no\") catch unreachable;\n        }\n        if (buttons.has_abort) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"abort\") catch unreachable;\n        }\n        if (buttons.has_retry) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"retry\") catch unreachable;\n        }\n        if (buttons.has_continue) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"continue\") catch unreachable;\n        }\n        if (buttons.has_ignore) {\n            if (stream.pos > 0) _ = stream.write(\",\") catch unreachable;\n            stream.writer().writeAll(\"ignore\") catch unreachable;\n        }\n\n        if (stream.pos > 0) {\n            try writer.writeAll(stream.getWritten());\n        } else {\n            try writer.writeAll(\"none\");\n        }\n    }\n};\n\npub const DesktopDescriptor = extern struct {\n    /// Number of bytes allocated in a Window for this desktop.\n    /// See `get_desktop_data` function for further information.\n    window_data_size: usize,\n\n    /// A function pointer to the event handler of a desktop.\n    /// The desktop will receive events via this function.\n    handle_event: *const fn (Desktop, *const DesktopEvent) callconv(.C) void,\n};\n\npub const DesktopEvent = extern union {\n    event_type: Type,\n\n    create_window: DesktopWindowEvent,\n    destroy_window: DesktopWindowEvent,\n    invalidate_window: DesktopWindowInvalidateEvent,\n\n    show_notification: DesktopNotificationEvent,\n    show_message_box: MessageBoxEvent,\n\n    pub const Type = enum(u16) {\n        // lifecycle management:\n\n        /// A window was created on this desktop.\n        create_window = 0,\n\n        /// A window was destroyed on this desktop.\n        destroy_window = 1,\n\n        /// A window has been invalidated and must be drawn again.\n        invalidate_window = 2,\n\n        // user interaction:\n\n        /// `send_notification` was called and the desktop user should display\n        /// a notification.\n        show_notification = 3,\n\n        /// `send_notification` was called and the desktop user should display\n        /// a notification.\n        show_message_box = 4,\n\n        _,\n    };\n\n    comptime {\n        validate_event_type(@This());\n    }\n};\n\npub const DesktopWindowEvent = extern struct {\n    event_type: DesktopEvent.Type,\n    window: Window,\n};\n\npub const DesktopWindowInvalidateEvent = extern struct {\n    event_type: DesktopEvent.Type,\n    window: Window,\n    area: Rectangle,\n};\n\npub const DesktopNotificationEvent = extern struct {\n    event_type: DesktopEvent.Type,\n\n    /// The text of the notification.\n    message_ptr: [*]const u8,\n\n    /// Length of `message_ptr`.\n    message_len: usize,\n\n    /// The severity/importance of the notification.\n    severity: NotificationSeverity,\n\n    pub fn message(ev: DesktopNotificationEvent) []const u8 {\n        return ev.message_ptr[0..ev.message_len];\n    }\n};\n\npub const MessageBoxEvent = extern struct {\n    event_type: DesktopEvent.Type,\n\n    /// The desktop-specific request id that must be passed into\n    /// `notify_message_box` to finish the message box request.\n    request_id: RequestID,\n\n    /// Pointer to the content of the message box.\n    message_ptr: [*]const u8,\n\n    /// length of `message_ptr`.\n    message_len: usize,\n\n    /// Pointer to the caption of the message box.\n    caption_ptr: [*]const u8,\n\n    /// length of `caption_ptr`.\n    caption_len: usize,\n\n    /// Which buttons are presented to the user?\n    buttons: MessageBoxButtons,\n\n    /// Which icon is shown?\n    icon: MessageBoxIcon,\n\n    pub const RequestID = enum(u16) { _ };\n\n    pub fn caption(ev: MessageBoxEvent) []const u8 {\n        return ev.caption_ptr[0..ev.caption_len];\n    }\n\n    pub fn message(ev: MessageBoxEvent) []const u8 {\n        return ev.message_ptr[0..ev.message_len];\n    }\n};\n\n/// An 8-bit RGB color value with a 233 encoding (2 bits R, 3 bits G, 3 bits B)\npub const Color = packed struct(u8) {\n    pub const black = from_rgb(0, 0, 0);\n    pub const white = from_rgb(255, 255, 255);\n    pub const red = from_rgb(255, 0, 0);\n    pub const lime = from_rgb(0, 255, 0);\n    pub const blue = from_rgb(0, 0, 255);\n    pub const cyan = from_rgb(0, 255, 255);\n    pub const magenta = from_rgb(255, 0, 255);\n    pub const yellow = from_rgb(255, 255, 0);\n\n    r: u2,\n    g: u3,\n    b: u3,\n\n    pub fn eql(a: Color, b: Color) bool {\n        return @as(u8, @bitCast(a)) == @as(u8, @bitCast(b));\n    }\n\n    pub fn to_u8(c: Color) u8 {\n        return @bitCast(c);\n    }\n\n    pub fn from_u8(u: u8) Color {\n        return @bitCast(u);\n    }\n\n    pub fn from_html(comptime str: []const u8) Color {\n        if (std.mem.startsWith(u8, str, \"#\")) {\n            // RGB encoded color\n            switch (str.len - 1) {\n                3 => { // 4-bit RGB\n                    const r = std.fmt.parseInt(u4, str[1..2], 16) catch @compileError(\"invalid hex code\");\n                    const g = std.fmt.parseInt(u4, str[2..3], 16) catch @compileError(\"invalid hex code\");\n                    const b = std.fmt.parseInt(u4, str[3..4], 16) catch @compileError(\"invalid hex code\");\n                    return Color.from_rgb(\n                        expand_channel(r),\n                        expand_channel(g),\n                        expand_channel(b),\n                    );\n                },\n                6 => { // 8-bit RGB\n                    const r = std.fmt.parseInt(u8, str[1..3], 16) catch @compileError(\"invalid hex code\");\n                    const g = std.fmt.parseInt(u8, str[3..5], 16) catch @compileError(\"invalid hex code\");\n                    const b = std.fmt.parseInt(u8, str[5..7], 16) catch @compileError(\"invalid hex code\");\n                    return Color.from_rgb(r, g, b);\n                },\n                else => if ((str.len - 1) % 3) {\n                    @compileError(\"Color depth with more than 8 bit is not supported\");\n                } else {\n                    @compileError(\"Color hex code must be a multiple of 3\");\n                },\n            }\n        } else {\n            // Well-known color\n            @compileError(\"Named colors are not supported yet!\");\n        }\n    }\n\n    pub fn from_rgb(r: u8, g: u8, b: u8) Color {\n        return Color{\n            .r = compress_channel(r, u2),\n            .g = compress_channel(g, u3),\n            .b = compress_channel(b, u3),\n        };\n    }\n\n    pub fn from_rgbf(r: f32, g: f32, b: f32) Color {\n        return Color{\n            .r = @intFromFloat(std.math.maxInt(u2) * std.math.clamp(r, 0.0, 1.0)),\n            .g = @intFromFloat(std.math.maxInt(u3) * std.math.clamp(g, 0.0, 1.0)),\n            .b = @intFromFloat(std.math.maxInt(u3) * std.math.clamp(b, 0.0, 1.0)),\n        };\n    }\n\n    pub fn to_rgb888(color: Color) RGB888 {\n        return .{\n            .r = expand_channel(color.r),\n            .g = expand_channel(color.g),\n            .b = expand_channel(color.b),\n        };\n    }\n\n    /// Converts the color to `0xFFRRGGBB`\n    pub fn to_argb8888(color: Color) ARGB8888 {\n        const exp = color.to_rgb888();\n        const value: u32 = 0xFF000000 |\n            @as(u32, exp.b) << 0 |\n            @as(u32, exp.g) << 8 |\n            @as(u32, exp.r) << 16;\n\n        return @enumFromInt(value);\n    }\n\n    /// Converts the color to `0xFFBBGGRR`\n    pub fn to_abgr8888(color: Color) ABGR8888 {\n        const exp = color.to_rgb888();\n        const value: u32 = 0xFF000000 |\n            @as(u32, exp.r) << 0 |\n            @as(u32, exp.g) << 8 |\n            @as(u32, exp.b) << 16;\n\n        return @enumFromInt(value);\n    }\n\n    pub const RGB888 = extern struct {\n        r: u8,\n        g: u8,\n        b: u8,\n    };\n\n    /// Expands a color value to 8 bit with a linear mapping.\n    pub inline fn expand_channel(src_value: anytype) u8 {\n        const bits = @bitSizeOf(@TypeOf(src_value));\n        if (bits > 8)\n            @compileError(\"src_value must have 8 bits or less\");\n\n        comptime var mask = ((1 << bits) - 1) << (8 - bits);\n\n        var pattern: u8 = @as(u8, src_value) << (8 - bits);\n        var result: u8 = 0;\n        inline while (mask != 0) {\n            result |= pattern;\n            mask >>= bits;\n            pattern >>= bits;\n        }\n\n        return result;\n    }\n\n    /// Compresses a color value from 8 bit to a smaller value.\n    pub inline fn compress_channel(src_value: u8, comptime T: type) T {\n        const bits = @bitSizeOf(T);\n        if (bits > 8)\n            @compileError(\"T must have 8 bits or less\");\n        return @truncate(src_value >> (8 - bits));\n    }\n\n    /// 32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian\n    ///\n    /// Layed out as a `u32` encoding `0xAARRGGBB`.\n    pub const ARGB8888 = enum(u32) {\n        _,\n    };\n\n    /// 32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian\n    ///\n    /// Layed out as a `u32` encoding `0xAABBGGRR`.\n    pub const ABGR8888 = enum(u32) {\n        _,\n    };\n};\n\npub const InputEvent = extern union {\n    event_type: Type,\n    mouse: MouseEvent,\n    keyboard: KeyboardEvent,\n\n    pub const Type = enum(u16) {\n        key_press = 0,\n        key_release = 1,\n\n        mouse_rel_motion = 2,\n        mouse_abs_motion = 3,\n        mouse_button_press = 4,\n        mouse_button_release = 5,\n    };\n\n    comptime {\n        validate_event_type(@This());\n    }\n\n    pub fn format(evt: InputEvent, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = options;\n        switch (evt.event_type) {\n            .key_press,\n            .key_release,\n            => {\n                try writer.print(\"InputEvent{{ .{s} = {} }}\", .{ @tagName(evt.event_type), evt.keyboard });\n            },\n\n            .mouse_rel_motion,\n            .mouse_abs_motion,\n            .mouse_button_press,\n            .mouse_button_release,\n            => {\n                try writer.print(\"InputEvent{{ .{s} = {} }}\", .{ @tagName(evt.event_type), evt.mouse });\n            },\n        }\n    }\n};\n\npub const WidgetEvent = extern union {\n    event_type: Type,\n\n    mouse: MouseEvent,\n    keyboard: KeyboardEvent,\n    control: WidgetControlMessage,\n\n    // TODO: Add event data\n\n    pub const Type = enum(u16) {\n        // lifecycle:\n\n        /// The widget was created and attached to a window.\n        create = 0,\n\n        /// The widget is in the process of being destroyed.\n        /// After this event, the handle will be invalid.\n        destroy = 1,\n\n        /// The creator of the widget wants to do something widget-specific.\n        control = 2,\n\n        // basic input:\n\n        /// The user clicked on the widget with the primary mouse button\n        /// or pressed the return or space bar button on the keyboard.\n        click = 3,\n\n        // keyboard input:\n\n        /// A key was pressed on the keyboard.\n        key_press = 4,\n\n        /// A key was released on the keyboard.\n        key_release = 5,\n\n        // mouse specific extras:\n\n        /// The mouse was moved inside the rectangle of the widget.\n        ///\n        /// NOTE: This event can only happen when `hit_test_visible` was set\n        /// in the widget creation flags.\n        mouse_enter = 6,\n\n        /// The mouse was moved outside the rectangle of the widget.\n        ///\n        /// NOTE: This event can only happen when `hit_test_visible` was set\n        /// in the widget creation flags.\n        mouse_leave = 7,\n\n        /// The mouse stopped for some time over the widget.\n        ///\n        /// NOTE: This event can only happen when `hit_test_visible` was set\n        /// in the widget creation flags.\n        mouse_hover = 8,\n\n        /// A mouse button was pressed over the widget.\n        ///\n        /// NOTE: This event can only happen when `hit_test_visible` was set\n        /// in the widget creation flags.\n        mouse_button_press = 9,\n\n        /// A mouse button was released over the widget.\n        ///\n        /// NOTE: This event can only happen when `hit_test_visible` was set\n        /// in the widget creation flags.\n        mouse_button_release = 10,\n\n        /// The mouse was moved over the widget.\n        ///\n        /// NOTE: This event can only happen when `hit_test_visible` was set\n        /// in the widget creation flags.\n        mouse_motion = 11,\n\n        /// A vertical or horizontal scroll wheel was scrolled over the widget.\n        ///\n        /// NOTE: This event can only happen when `hit_test_visible` was set\n        /// in the widget creation flags.\n        scroll = 12,\n\n        // drag&drop operations:\n\n        /// The user dragged a payload into the rectangle of this widget.\n        ///\n        /// NOTE: This event can only happen when `allow_drop` was set in the\n        /// widget creation flags.\n        drag_enter = 13,\n\n        /// The user dragged a payload out of the rectangle of this widget.\n        ///\n        /// NOTE: This event can only happen when `allow_drop` was set in the\n        /// widget type creation flags.\n        drag_leave = 14,\n\n        /// The user dragged a payload over the rectangle of this widget.\n        ///\n        /// NOTE: This event can only happen when `allow_drop` was set in the\n        /// widget type creation flags.\n        drag_over = 15,\n\n        /// The user dropped a payload into this widget.\n        ///\n        /// NOTE: This event can only happen when `allow_drop` was set in the\n        /// widget type creation flags.\n        drag_drop = 16,\n\n        // clipboard operations:\n\n        /// The user requested a clipboard copy operation, usually by pressing 'Ctrl-C'.\n        ///\n        /// NOTE: This event can only happen when `clipboard_sensitive` was set in\n        /// the widget type creation flags.\n        clipboard_copy = 17,\n\n        /// The user requested a clipboard paste operation, usually by pressing 'Ctrl-V'.\n        ///\n        /// NOTE: This event can only happen when `clipboard_sensitive` was set in\n        /// the widget type creation flags.\n        clipboard_paste = 18,\n\n        /// The user requested a clipboard cut operation, usually by pressing 'Ctrl-X'.\n        ///\n        /// NOTE: This event can only happen when `clipboard_sensitive` was set in\n        /// the widget type creation flags.\n        clipboard_cut = 19,\n\n        // widget specific:\n\n        /// The widget was resized with a call to `place_widget`.\n        ///\n        /// NOTE: This event will not fire if the widget was only moved.\n        resized = 21,\n\n        /// The widget should draw itself.\n        paint = 20,\n\n        /// User pressed the \"context menu\" button or did a\n        /// secondary mouse button click on the  widget.\n        context_menu_request = 22,\n\n        /// The widget received focus via mouse or keyboard.\n        focus_enter = 23,\n\n        /// The widget lost focus after receiving it.\n        focus_leave = 24,\n\n        _,\n    };\n\n    comptime {\n        validate_event_type(@This());\n    }\n};\n\npub const WindowEvent = extern union {\n    event_type: Type,\n\n    mouse: MouseEvent,\n    keyboard: KeyboardEvent,\n    widget_notify: WidgetNotifyEvent,\n\n    pub const Type = enum(u16) {\n        widget_notify = 0,\n\n        key_press = 1,\n        key_release = 2,\n\n        mouse_enter = 3,\n        mouse_leave = 4,\n        mouse_motion = 7,\n        mouse_button_press = 6,\n        mouse_button_release = 5,\n\n        /// The user requested the window to be closed.\n        window_close = 8,\n\n        /// The window was minimized and is not visible anymore.\n        window_minimize = 9,\n\n        /// The window was restored from minimized state.\n        window_restore = 10,\n\n        /// The window is currently moving on the screen. Query `window.bounds` to get the new position.\n        window_moving = 11,\n\n        /// The window was moved on the screen. Query `window.bounds` to get the new position.\n        window_moved = 12,\n\n        /// The window size is currently changing. Query `window.bounds` to get the new size.\n        window_resizing = 13,\n\n        /// The window size changed. Query `window.bounds` to get the new size.\n        window_resized = 14,\n    };\n\n    comptime {\n        validate_event_type(@This());\n    }\n};\n\nfn validate_event_type(comptime Event: type) void {\n    const union_fields = @typeInfo(Event).@\"union\".fields;\n\n    // first union field must define our event type:\n    std.debug.assert(union_fields[0].type == Event.Type);\n\n    var requires_shared_event_type = false;\n\n    // check that all other fields are extern structs that share\n    // the first field with this union:\n    for (union_fields[1..]) |fld| {\n        const event_type = @typeInfo(fld.type).@\"struct\";\n\n        const first_field = event_type.fields[0];\n\n        const Msg = [1][]const u8;\n        var problems: []const []const u8 = &.{};\n\n        if (event_type.layout != .@\"extern\") {\n            problems = problems ++ &.{\"layout not extern\"};\n        }\n        if (first_field.type != Event.Type and first_field.type != SharedEventType) {\n            problems = problems ++ Msg{\"first field must be either Event.Type or SharedEventType\"};\n        }\n        if (!std.mem.eql(u8, first_field.name, union_fields[0].name)) {\n            problems = problems ++ Msg{std.fmt.comptimePrint(\"first field must be named {}\", .{std.zig.fmtId(first_field.name)})};\n        }\n        if (@offsetOf(fld.type, union_fields[0].name) != 0) {\n            problems = problems ++ Msg{std.fmt.comptimePrint(\"{} must have offset 0\", .{std.zig.fmtId(union_fields[0].name)})};\n        }\n\n        if (problems.len > 0) {\n            var msg: []const u8 = \"failed to validate \" ++ @typeName(Event) ++ \":\";\n            for (problems) |problem| {\n                msg = msg ++ \"\\n\" ++ problem;\n            }\n            @compileError(msg);\n        }\n\n        if (first_field.type == SharedEventType) {\n            requires_shared_event_type = true;\n        }\n    }\n\n    if (requires_shared_event_type) {\n        const in_shared_type = for (@typeInfo(SharedEventType).@\"union\".fields) |fld| {\n            if (fld.type == Event.Type)\n                break true;\n        } else false;\n        if (!in_shared_type)\n            @compileError(@typeName(Event.Type) ++ \" is not contained in SharedEventType!\");\n    }\n}\n\n/// Event structures shared between different event groups\npub const SharedEventType = extern union {\n    input: InputEvent.Type,\n    widget: WidgetEvent.Type,\n    window: WindowEvent.Type,\n};\n\npub const MouseEvent = extern struct {\n    event_type: SharedEventType, // MUST BE FIRST!\n\n    x: i16,\n    y: i16,\n    dx: i16,\n    dy: i16,\n    button: MouseButton,\n};\n\npub const KeyboardEvent = extern struct {\n    event_type: SharedEventType, // MUST BE FIRST!\n\n    /// The raw scancode for the key. Meaning depends on the layout,\n    /// represents kinda the physical position on the keyboard.\n    scancode: u32,\n\n    /// The virtual key, independent of layout. Represents the logical\n    /// function of the key.\n    key: KeyCode,\n\n    /// If set, the pressed key combination has a mapping that produces\n    /// text input. UTF-8 encoded.\n    text: ?[*:0]const u8,\n\n    /// The key in this event was pressed or released\n    pressed: bool,\n\n    /// The modifier keys currently active\n    modifiers: KeyboardModifiers,\n};\n\npub const KeyboardModifiers = packed struct(u16) {\n    shift: bool,\n    alt: bool,\n    ctrl: bool,\n    shift_left: bool,\n    shift_right: bool,\n    ctrl_left: bool,\n    ctrl_right: bool,\n    alt_graph: bool,\n    padding: u8 = 0,\n\n    pub fn format(mods: KeyboardModifiers, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = options;\n\n        var strings = std.BoundedArray([]const u8, 7){};\n\n        if (mods.shift) strings.appendAssumeCapacity(\"shift\");\n        if (mods.alt) strings.appendAssumeCapacity(\"alt\");\n        if (mods.ctrl) strings.appendAssumeCapacity(\"ctrl\");\n        if (mods.shift_left) strings.appendAssumeCapacity(\"lshift\");\n        if (mods.shift_right) strings.appendAssumeCapacity(\"rshift\");\n        if (mods.ctrl_left) strings.appendAssumeCapacity(\"lctrl\");\n        if (mods.ctrl_right) strings.appendAssumeCapacity(\"rctrl\");\n        if (mods.alt_graph) strings.appendAssumeCapacity(\"alt_graph\");\n\n        try writer.writeAll(\"Modifiers{\");\n\n        if (strings.len > 0) {\n            try writer.writeAll(strings.buffer[0]);\n            for (strings.slice()[1..]) |item| {\n                try writer.writeAll(\", \");\n                try writer.writeAll(item);\n            }\n        } else {\n            try writer.writeAll(\"none\");\n        }\n        try writer.writeAll(\"}\");\n    }\n};\n\npub const Point = extern struct {\n    pub const zero = new(0, 0);\n\n    x: i16,\n    y: i16,\n\n    pub fn new(x: i16, y: i16) Point {\n        return Point{ .x = x, .y = y };\n    }\n\n    pub fn eql(a: Point, b: Point) bool {\n        return (a.x == b.x) and (a.y == b.y);\n    }\n\n    pub fn manhattenDistance(a: Point, b: Point) u16 {\n        return @abs(a.x - b.x) + @abs(a.y - b.y);\n    }\n\n    pub fn move_by(pt: Point, dx: i16, dy: i16) Point {\n        return new(\n            pt.x + dx,\n            pt.y + dy,\n        );\n    }\n\n    pub fn format(point: Point, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = options;\n        try writer.print(\"Point({},{})\", .{\n            point.x, point.y,\n        });\n    }\n};\n\npub const Size = extern struct {\n    pub const empty = new(0, 0);\n    pub const max = new(std.math.maxInt(u16), std.math.maxInt(u16));\n\n    width: u16,\n    height: u16,\n\n    pub fn new(w: u16, h: u16) Size {\n        return Size{ .width = w, .height = h };\n    }\n\n    pub fn eql(a: Size, b: Size) bool {\n        return (a.width == b.width) and (a.height == b.height);\n    }\n\n    pub fn format(size: Size, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = options;\n        try writer.print(\"Size({}x{})\", .{\n            size.width,\n            size.height,\n        });\n    }\n};\n\npub const Rectangle = extern struct {\n    x: i16,\n    y: i16,\n    width: u16,\n    height: u16,\n\n    pub fn new(pos: Point, siz: Size) Rectangle {\n        return Rectangle{\n            .x = pos.x,\n            .y = pos.y,\n            .width = siz.width,\n            .height = siz.height,\n        };\n    }\n\n    pub fn position(rect: Rectangle) Point {\n        return Point{ .x = rect.x, .y = rect.y };\n    }\n\n    pub fn size(rect: Rectangle) Size {\n        return Size{ .width = rect.width, .height = rect.height };\n    }\n\n    pub fn empty(rect: Rectangle) bool {\n        return (rect.width == 0) and (rect.height == 0);\n    }\n\n    pub fn contains(rect: Rectangle, pt: Point) bool {\n        return (pt.x >= rect.x) and\n            (pt.x < rect.x + @as(u15, @intCast(rect.width))) and\n            (pt.y >= rect.y) and\n            (pt.y < rect.y + @as(u15, @intCast(rect.height)));\n    }\n\n    pub fn containsRectangle(boundary: Rectangle, region: Rectangle) bool {\n        return boundary.contains(region.position()) and\n            boundary.contains(Point.new(region.x + @as(u15, @intCast(region.width)) - 1, region.y + @as(u15, @intCast(region.height)) - 1));\n    }\n\n    /// Returns true if `a` and `b` overlap.\n    pub fn intersects(a: Rectangle, b: Rectangle) bool {\n        return a.x + @as(u15, @intCast(a.width)) >= b.x and\n            a.y + @as(u15, @intCast(a.height)) >= b.y and\n            a.x <= b.x + @as(u15, @intCast(b.width)) and\n            a.y <= b.y + @as(u15, @intCast(b.height));\n    }\n\n    /// Returns the overlapping region of `a` and `b`.\n    pub fn overlap(a: Rectangle, b: Rectangle) Rectangle {\n        const _left = @max(a.left(), b.left());\n        const _right = @min(a.right(), b.right());\n        const _top = @max(a.top(), b.top());\n        const _bottom = @min(a.bottom(), b.bottom());\n\n        return .{\n            .x = _left,\n            .y = _top,\n            .width = @intCast(_right -| _left),\n            .height = @intCast(_bottom -| _top),\n        };\n    }\n\n    pub fn eql(a: Rectangle, b: Rectangle) bool {\n        return a.size().eql(b.size()) and a.position().eql(b.position());\n    }\n\n    pub fn top(rect: Rectangle) i16 {\n        return rect.y;\n    }\n    pub fn bottom(rect: Rectangle) i16 {\n        return rect.y + @as(u15, @intCast(rect.height));\n    }\n    pub fn left(rect: Rectangle) i16 {\n        return rect.x;\n    }\n    pub fn right(rect: Rectangle) i16 {\n        return rect.x +| @as(u15, @intCast(rect.width));\n    }\n\n    pub fn shrink(rect: Rectangle, amount: u15) Rectangle {\n        var copy = rect;\n        copy.x +|= amount;\n        copy.y +|= amount;\n        copy.width -|= 2 * amount;\n        copy.height -|= 2 * amount;\n        return copy;\n    }\n\n    pub fn grow(rect: Rectangle, amount: u15) Rectangle {\n        var copy = rect;\n        copy.x -|= amount;\n        copy.y -|= amount;\n        copy.width +|= 2 * amount;\n        copy.height +|= 2 * amount;\n        return copy;\n    }\n\n    pub fn format(rect: Rectangle, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = options;\n        try writer.print(\"Rectangle({},{},{}x{})\", .{\n            rect.x,\n            rect.y,\n            rect.width,\n            rect.height,\n        });\n    }\n\n    pub fn corner(rect: Rectangle, corner_id: Corner) Point {\n        const edge: u2 = @intFromEnum(corner_id);\n\n        var x: i16 = rect.x;\n        var y: i16 = rect.y;\n\n        x += @intCast(@intFromBool((edge & 1) != 0) * rect.width);\n        y += @intCast(@intFromBool((edge & 2) != 0) * rect.height);\n\n        return Point.new(x, y);\n    }\n\n    pub const Corner = enum(u2) {\n        // Encodes X/Y position in bits:\n        top_left = 0b00,\n        top_right = 0b01,\n        bottom_left = 0b10,\n        bottom_right = 0b11,\n    };\n};\n\npub const VideoMemory = extern struct {\n    /// Pointer to the first pixel of the first scanline.\n    ///\n    /// Each scanline is `.stride` elements separated from\n    /// each other and contains `width` valid elements.\n    ///\n    /// There are `height` total scanlines available.\n    base: [*]align(4) Color,\n\n    /// Length of a scanline.\n    stride: usize,\n\n    /// Number of valid elements in a scanline\n    width: u16,\n\n    /// Number of valid scanlines.\n    height: u16,\n};\n\npub const FileSystemInfo = extern struct {\n    id: FileSystemId, // system-unique id of this file system\n    flags: Flags, // binary infos about the file system\n    name: [max_fs_name_len]u8, // user addressable file system identifier (\"USB0\", ...)\n    filesystem: [max_fs_type_len]u8, // string identifier of a file system driver (\"FAT32\", ...)\n\n    pub const Flags = packed struct(u16) {\n        system: bool, // is the system boot disk\n        removable: bool, // the file system can be removed by the user\n        read_only: bool, // the file system is mounted as read-only\n        reserved: u13 = 0,\n    };\n\n    pub fn getName(fi: *const FileInfo) []const u8 {\n        return std.mem.sliceTo(&fi.name, 0);\n    }\n\n    pub fn getFileSystem(fi: *const FileInfo) []const u8 {\n        return std.mem.sliceTo(&fi.filesystem, 0);\n    }\n};\n\npub const FileInfo = extern struct {\n    name: [max_file_name_len]u8,\n    size: u64,\n    attributes: FileAttributes,\n    creation_date: DateTime,\n    modified_date: DateTime,\n\n    pub fn getName(fi: *const FileInfo) []const u8 {\n        return std.mem.sliceTo(&fi.name, 0);\n    }\n};\n\npub const IP = extern struct {\n    type: IP_Type,\n    addr: extern union {\n        v4: IPv4,\n        v6: IPv6,\n    },\n\n    pub fn ipv4(addr: [4]u8) IP {\n        return IP{ .type = .ipv4, .addr = .{ .v4 = .{ .addr = addr } } };\n    }\n\n    pub fn ipv6(addr: [16]u8, zone: u8) IP {\n        return IP{ .type = .ipv6, .addr = .{ .v6 = .{ .addr = addr, .zone = zone } } };\n    }\n\n    pub fn format(ip: IP, comptime fmt: []const u8, opt: std.fmt.FormatOptions, writer: anytype) !void {\n        switch (ip.type) {\n            .ipv4 => try ip.addr.v4.format(fmt, opt, writer),\n            .ipv6 => try ip.addr.v6.format(fmt, opt, writer),\n        }\n    }\n};\n\npub const IPv4 = extern struct {\n    addr: [4]u8 align(4),\n\n    pub fn format(ip: IPv4, comptime fmt: []const u8, opt: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = opt;\n        try writer.print(\"{}.{}.{}.{}\", .{\n            ip.addr[0],\n            ip.addr[1],\n            ip.addr[2],\n            ip.addr[3],\n        });\n    }\n};\n\npub const IPv6 = extern struct {\n    addr: [16]u8 align(4),\n    zone: u8,\n\n    pub fn format(ip: IPv6, comptime fmt: []const u8, opt: std.fmt.FormatOptions, writer: anytype) !void {\n        _ = fmt;\n        _ = opt;\n        try writer.print(\"[{X:0>2}{X:0>2}:{X:0>2}{X:0>2}:{X:0>2}{X:0>2}:{X:0>2}{X:0>2}:{X:0>2}{X:0>2}:{X:0>2}{X:0>2}:{X:0>2}{X:0>2}:{X:0>2}{X:0>2}/{}]\", .{\n            ip.addr[0],\n            ip.addr[1],\n            ip.addr[2],\n            ip.addr[3],\n            ip.addr[4],\n            ip.addr[5],\n            ip.addr[6],\n            ip.addr[7],\n            ip.addr[8],\n            ip.addr[9],\n            ip.addr[10],\n            ip.addr[11],\n            ip.addr[12],\n            ip.addr[13],\n            ip.addr[14],\n            ip.addr[15],\n            ip.zone,\n        });\n    }\n};\n\npub const EndPoint = extern struct {\n    ip: IP,\n    port: u16,\n\n    pub fn new(ip: IP, port: u16) EndPoint {\n        return EndPoint{ .ip = ip, .port = port };\n    }\n};\n\n///////////////////////////////////////////////////////////\n// Callback types:\n\n///////////////////////////////////////////////////////////\n// Legacy:\n\n// pub const NetworkStatus = enum(u8) {\n//     disconnected = 0, // no cable is plugged in\n//     mac_available = 1, // cable is plugged in and connected, no DHCP or static IP performed yet\n//     ip_available = 2, // interface got at least one IP assigned\n//     gateway_available = 3, // the gateway, if any, is reachable\n// };\n\n// pub const Ping = extern struct {\n//     destination: IP, // who to ping\n//     ttl: u16, // hops\n//     timeout: u16, // ms, a minute timeout for ping is enough. if you have a higher ping, you have other problems\n//     response: u16 = undefined, // response time in ms\n// };\n"
 },
 "sys_resources": [
  "Service",
  "SharedMemory",
  "Pipe",
  "Process",
  "Thread",
  "TcpSocket",
  "UdpSocket",
  "File",
  "Directory",
  "VideoOutput",
  "Font",
  "Framebuffer",
  "Window",
  "Widget",
  "Desktop",
  "WidgetType",
  "SyncEvent",
  "Mutex"
 ],
 "iops": [
  {
   "name": "Spawn",
   "docs": "Spawns a new process",
   "full_qualified_name": "process.Spawn",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": "Relative banse directory for `path`.",
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path",
        "docs": "File name of the executable relative to `dir`.",
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "argv",
        "docs": "The arguments passed to the process.",
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "SpawnProcessArg"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": "Relative banse directory for `path`.",
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": "File name of the executable relative to `dir`.",
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": "Length of path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "argv_ptr",
        "docs": "The arguments passed to the process.",
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "SpawnProcessArg"
           }
          }
         }
        }
       },
       {
        "name": "argv_len",
        "docs": "Length of argv_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "process",
        "docs": "Handle to the spawned process.",
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "native": [
       {
        "name": "process",
        "docs": "Handle to the spawned process.",
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "SystemResources",
        "BadExecutable",
        "InvalidHandle",
        "FileNotFound",
        "InvalidPath",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Timer",
   "docs": "Sleeps until `clock.monotonic()` returns at least `timeout`.",
   "full_qualified_name": "clock.Timer",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "timeout",
        "docs": "Monotonic timestamp in nanoseconds until the operation completes.",
        "type": {
         "ReferenceType": {
          "name": "Absolute"
         }
        }
       }
      ],
      "native": [
       {
        "name": "timeout",
        "docs": "Monotonic timestamp in nanoseconds until the operation completes.",
        "type": {
         "ReferenceType": {
          "name": "Absolute"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "Alarm",
   "docs": "Sleeps until `datetime.now()` returns a point in  time that comes after `when`.",
   "full_qualified_name": "datetime.Alarm",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "when",
        "docs": "Earliest possible date time of when the alarm triggers.",
        "type": {
         "ReferenceType": {
          "name": "DateTime"
         }
        }
       }
      ],
      "native": [
       {
        "name": "when",
        "docs": "Earliest possible date time of when the alarm triggers.",
        "type": {
         "ReferenceType": {
          "name": "DateTime"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "WaitForVBlank",
   "docs": "\nThis allows frame-synchronized presentation of video data.",
   "full_qualified_name": "video.WaitForVBlank",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "output",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       }
      ],
      "native": [
       {
        "name": "output",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "GetStrictRandom",
   "docs": "This call blocks until the entropy pool has enough entropy to fill\nan entire hash to draw from.",
   "full_qualified_name": "random.GetStrictRandom",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "data",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "data_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "data_len",
        "docs": "Length of data_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "GetEvent",
   "docs": "Waits for an input event and completes when any input was done.",
   "full_qualified_name": "input.GetEvent",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "outputs": {
      "abi": [
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "InputEvent"
         }
        }
       }
      ],
      "native": [
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "InputEvent"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "NonExclusiveAccess",
        "InProgress"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Bind",
   "docs": null,
   "full_qualified_name": "network.udp.Bind",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "native": [
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "IllegalValue",
        "SystemResources",
        "InvalidHandle",
        "AddressInUse"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Connect",
   "docs": null,
   "full_qualified_name": "network.udp.Connect",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "target",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "target",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BufferError",
        "Timeout",
        "AlreadyConnecting",
        "IllegalArgument",
        "SystemResources",
        "InvalidHandle",
        "LowlevelInterfaceError",
        "AlreadyConnected",
        "OutOfMemory",
        "InProgress",
        "Routing",
        "IllegalValue"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Disconnect",
   "docs": null,
   "full_qualified_name": "network.udp.Disconnect",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "NotConnected",
        "SystemResources",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Send",
   "docs": null,
   "full_qualified_name": "network.udp.Send",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "data",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "data_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "data_len",
        "docs": "Length of data_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "bytes_sent",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "bytes_sent",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BufferError",
        "Timeout",
        "IllegalArgument",
        "SystemResources",
        "InvalidHandle",
        "LowlevelInterfaceError",
        "OutOfMemory",
        "InProgress",
        "NotConnected",
        "Routing",
        "IllegalValue"
       ]
      }
     }
    }
   }
  },
  {
   "name": "SendTo",
   "docs": null,
   "full_qualified_name": "network.udp.SendTo",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "receiver",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       },
       {
        "name": "data",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "receiver",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       },
       {
        "name": "data_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "data_len",
        "docs": "Length of data_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "bytes_sent",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "bytes_sent",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BufferError",
        "Timeout",
        "IllegalArgument",
        "SystemResources",
        "InvalidHandle",
        "LowlevelInterfaceError",
        "OutOfMemory",
        "InProgress",
        "Routing",
        "IllegalValue"
       ]
      }
     }
    }
   }
  },
  {
   "name": "ReceiveFrom",
   "docs": null,
   "full_qualified_name": "network.udp.ReceiveFrom",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "buffer",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "UdpSocket"
         }
        }
       },
       {
        "name": "buffer_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "buffer_len",
        "docs": "Length of buffer_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "bytes_received",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "sender",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "native": [
       {
        "name": "bytes_received",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "sender",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BufferError",
        "Timeout",
        "IllegalArgument",
        "SystemResources",
        "InvalidHandle",
        "LowlevelInterfaceError",
        "OutOfMemory",
        "InProgress",
        "Routing",
        "IllegalValue"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Bind",
   "docs": null,
   "full_qualified_name": "network.tcp.Bind",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "native": [
       {
        "name": "bind_point",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "IllegalValue",
        "SystemResources",
        "InvalidHandle",
        "AddressInUse"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Connect",
   "docs": null,
   "full_qualified_name": "network.tcp.Connect",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "target",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "target",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "EndPoint"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BufferError",
        "Timeout",
        "AlreadyConnecting",
        "ConnectionReset",
        "ConnectionClosed",
        "IllegalArgument",
        "SystemResources",
        "InvalidHandle",
        "ConnectionAborted",
        "LowlevelInterfaceError",
        "AlreadyConnected",
        "OutOfMemory",
        "InProgress",
        "Routing",
        "IllegalValue"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Send",
   "docs": null,
   "full_qualified_name": "network.tcp.Send",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "data",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "data_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "data_len",
        "docs": "Length of data_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "bytes_sent",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "bytes_sent",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BufferError",
        "Timeout",
        "ConnectionReset",
        "ConnectionClosed",
        "IllegalArgument",
        "SystemResources",
        "InvalidHandle",
        "ConnectionAborted",
        "LowlevelInterfaceError",
        "OutOfMemory",
        "InProgress",
        "NotConnected",
        "Routing",
        "IllegalValue"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Receive",
   "docs": null,
   "full_qualified_name": "network.tcp.Receive",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "buffer",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "read_all",
        "docs": "if true, will read until `buffer.len` bytes arrived. otherwise will read until the end of a single packet",
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "native": [
       {
        "name": "socket",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "TcpSocket"
         }
        }
       },
       {
        "name": "buffer_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "buffer_len",
        "docs": "Length of buffer_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "read_all",
        "docs": "if true, will read until `buffer.len` bytes arrived. otherwise will read until the end of a single packet",
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "bytes_received",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "bytes_received",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BufferError",
        "Timeout",
        "AlreadyConnecting",
        "ConnectionReset",
        "ConnectionClosed",
        "IllegalArgument",
        "SystemResources",
        "InvalidHandle",
        "ConnectionAborted",
        "LowlevelInterfaceError",
        "AlreadyConnected",
        "OutOfMemory",
        "InProgress",
        "NotConnected",
        "Routing",
        "IllegalValue"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Sync",
   "docs": "Flushes all open files to disk.",
   "full_qualified_name": "fs.Sync",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "GetFilesystemInfo",
   "docs": "Also returns a `next` id that can be used to iterate over all filesystems.\nThe `system` filesystem is guaranteed to be the first one.",
   "full_qualified_name": "fs.GetFilesystemInfo",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "fs",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemId"
         }
        }
       }
      ],
      "native": [
       {
        "name": "fs",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemId"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemInfo"
         }
        }
       },
       {
        "name": "next",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemId"
         }
        }
       }
      ],
      "native": [
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemInfo"
         }
        }
       },
       {
        "name": "next",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemId"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "InvalidFileSystem"
       ]
      }
     }
    }
   }
  },
  {
   "name": "OpenDrive",
   "docs": "opens a directory on a filesystem",
   "full_qualified_name": "fs.OpenDrive",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "fs",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemId"
         }
        }
       },
       {
        "name": "path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "fs",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileSystemId"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": "Length of path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "NotADir",
        "InvalidFileSystem",
        "SystemResources",
        "SystemFdQuotaExceeded",
        "FileNotFound",
        "InvalidPath",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "OpenDir",
   "docs": "opens a directory relative to the given dir handle.",
   "full_qualified_name": "fs.OpenDir",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": "Length of path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "NotADir",
        "SystemResources",
        "InvalidHandle",
        "SystemFdQuotaExceeded",
        "FileNotFound",
        "InvalidPath",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "CloseDir",
   "docs": "closes the directory handle",
   "full_qualified_name": "fs.CloseDir",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "ResetDirEnumeration",
   "docs": "resets the directory iterator to the starting point",
   "full_qualified_name": "fs.ResetDirEnumeration",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "SystemResources",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "EnumerateDir",
   "docs": "returns the info for the current file or \"eof\", and advances the iterator to the next entry if possible",
   "full_qualified_name": "fs.EnumerateDir",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "eof",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       },
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileInfo"
         }
        }
       }
      ],
      "native": [
       {
        "name": "eof",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       },
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileInfo"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "SystemResources",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Delete",
   "docs": "deletes a file or directory by the given path.",
   "full_qualified_name": "fs.Delete",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "recurse",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": "Length of path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "recurse",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidPath",
        "DiskError",
        "InvalidHandle",
        "FileNotFound"
       ]
      }
     }
    }
   }
  },
  {
   "name": "MkDir",
   "docs": "creates a new directory relative to dir. If `path` contains subdirectories, all\ndirectories are created.",
   "full_qualified_name": "fs.MkDir",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "mkopen",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": "Length of path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "mkopen",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidPath",
        "DiskError",
        "Exists",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "StatEntry",
   "docs": "returns the type of the file/dir at path, also adds size and modification dates",
   "full_qualified_name": "fs.StatEntry",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileInfo"
         }
        }
       }
      ],
      "native": [
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileInfo"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidPath",
        "DiskError",
        "InvalidHandle",
        "FileNotFound"
       ]
      }
     }
    }
   }
  },
  {
   "name": "NearMove",
   "docs": "renames a file inside the same file system.\nNOTE: This is a cheap operation and does not require the copying of data.",
   "full_qualified_name": "fs.NearMove",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "src_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "src_path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "dst_path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "src_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "src_path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "src_path_len",
        "docs": "Length of src_path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "dst_path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "dst_path_len",
        "docs": "Length of dst_path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidHandle",
        "FileNotFound",
        "Exists",
        "InvalidPath",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "FarMove",
   "docs": "moves a file or directory between two unrelated directories. Can also move between different file systems.\nNOTE: This syscall might copy the data.",
   "full_qualified_name": "fs.FarMove",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "src_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "src_path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "dst_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "dst_path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "src_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "src_path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "src_path_len",
        "docs": "Length of src_path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "dst_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "dst_path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "dst_path_len",
        "docs": "Length of dst_path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidHandle",
        "NoSpaceLeft",
        "FileNotFound",
        "Exists",
        "InvalidPath",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Copy",
   "docs": "copies a file or directory between two unrelated directories. Can also move between different file systems.",
   "full_qualified_name": "fs.Copy",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "src_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "src_path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "dst_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "dst_path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "src_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "src_path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "src_path_len",
        "docs": "Length of src_path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "dst_dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "dst_path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "dst_path_len",
        "docs": "Length of dst_path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InvalidHandle",
        "NoSpaceLeft",
        "FileNotFound",
        "Exists",
        "InvalidPath",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "OpenFile",
   "docs": "opens a file from the given directory.",
   "full_qualified_name": "fs.OpenFile",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "access",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileAccess"
         }
        }
       },
       {
        "name": "mode",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileMode"
         }
        }
       }
      ],
      "native": [
       {
        "name": "dir",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Directory"
         }
        }
       },
       {
        "name": "path_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "path_len",
        "docs": "Length of path_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "access",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileAccess"
         }
        }
       },
       {
        "name": "mode",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileMode"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "handle",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "native": [
       {
        "name": "handle",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "SystemResources",
        "InvalidHandle",
        "SystemFdQuotaExceeded",
        "NoSpaceLeft",
        "FileAlreadyExists",
        "FileNotFound",
        "Exists",
        "WriteProtected",
        "InvalidPath",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "CloseFile",
   "docs": "closes the handle and flushes the file.",
   "full_qualified_name": "fs.CloseFile",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "native": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "SystemResources",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "FlushFile",
   "docs": "makes sure this file is safely stored to mass storage device",
   "full_qualified_name": "fs.FlushFile",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "native": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "SystemResources",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Read",
   "docs": "directly reads data from a given offset into the file. no streaming API to the kernel",
   "full_qualified_name": "fs.Read",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       },
       {
        "name": "offset",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u64"
         }
        }
       },
       {
        "name": "buffer",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       },
       {
        "name": "offset",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u64"
         }
        }
       },
       {
        "name": "buffer_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "buffer_len",
        "docs": "Length of buffer_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "count",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "count",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "SystemResources",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Write",
   "docs": "directly writes data to a given offset into the file. no streaming API to the kernel",
   "full_qualified_name": "fs.Write",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       },
       {
        "name": "offset",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u64"
         }
        }
       },
       {
        "name": "buffer",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       },
       {
        "name": "offset",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u64"
         }
        }
       },
       {
        "name": "buffer_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "buffer_len",
        "docs": "Length of buffer_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "count",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "count",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "SystemResources",
        "InvalidHandle",
        "NoSpaceLeft",
        "WriteProtected",
        "DiskError"
       ]
      }
     }
    }
   }
  },
  {
   "name": "StatFile",
   "docs": "allows us to get the current size of the file, modification dates, and so on",
   "full_qualified_name": "fs.StatFile",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "native": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileInfo"
         }
        }
       }
      ],
      "native": [
       {
        "name": "info",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "FileInfo"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "SystemResources",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Resize",
   "docs": "Resizes the file to the given length in bytes. Can be also used to truncate a file to zero length.",
   "full_qualified_name": "fs.Resize",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       },
       {
        "name": "length",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u64"
         }
        }
       }
      ],
      "native": [
       {
        "name": "file",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "File"
         }
        }
       },
       {
        "name": "length",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u64"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "DiskError",
        "SystemResources",
        "InvalidHandle",
        "NoSpaceLeft"
       ]
      }
     }
    }
   }
  },
  {
   "name": "Write",
   "docs": "Writes elements from `data` into the given pipe.",
   "full_qualified_name": "pipe.Write",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "pipe",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       },
       {
        "name": "data",
        "docs": "Pointer to the first element. Length defines how many elements are to be transferred.",
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "stride",
        "docs": "Distance between each element in `data`. Can be different from the pipes element size",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "mode",
        "docs": "Defines how the write should operate.",
        "type": {
         "ReferenceType": {
          "name": "PipeMode"
         }
        }
       }
      ],
      "native": [
       {
        "name": "pipe",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       },
       {
        "name": "data_ptr",
        "docs": "Pointer to the first element. Length defines how many elements are to be transferred.",
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "data_len",
        "docs": "Length of data_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "stride",
        "docs": "Distance between each element in `data`. Can be different from the pipes element size",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "mode",
        "docs": "Defines how the write should operate.",
        "type": {
         "ReferenceType": {
          "name": "PipeMode"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "count",
        "docs": "Numbert of elements written into the pipe.",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "count",
        "docs": "Numbert of elements written into the pipe.",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "Read",
   "docs": "Reads elements from a pipe into `buffer`.",
   "full_qualified_name": "pipe.Read",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "pipe",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       },
       {
        "name": "buffer",
        "docs": "Points to the first element to be received.",
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "stride",
        "docs": "Distance between each element in `buffer`. Can be different from the pipes element size",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "mode",
        "docs": "Defines how the read should operate.",
        "type": {
         "ReferenceType": {
          "name": "PipeMode"
         }
        }
       }
      ],
      "native": [
       {
        "name": "pipe",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       },
       {
        "name": "buffer_ptr",
        "docs": "Points to the first element to be received.",
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "buffer_len",
        "docs": "Length of buffer_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "stride",
        "docs": "Distance between each element in `buffer`. Can be different from the pipes element size",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "mode",
        "docs": "Defines how the read should operate.",
        "type": {
         "ReferenceType": {
          "name": "PipeMode"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "count",
        "docs": "Number of elements read.",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "count",
        "docs": "Number of elements read.",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "WaitForEvent",
   "docs": "Waits for the given `SyncEvent` to be notified.",
   "full_qualified_name": "sync.WaitForEvent",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SyncEvent"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SyncEvent"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "Lock",
   "docs": "Locks a mutex. Will complete once the mutex is locked.",
   "full_qualified_name": "sync.Lock",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Mutex"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Mutex"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "Render",
   "docs": "\nNOTE: On machines without hardware acceleration, this syscall might be completed synchronously.",
   "full_qualified_name": "draw.Render",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "target",
        "docs": "The framebuffer which should be drawn to.",
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       },
       {
        "name": "sequence",
        "docs": "The AGP code that defines the drawing.",
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "auto_invalidate",
        "docs": "If the target framebuffer is invalidatable, it is automatically invalidated after the completion",
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "native": [
       {
        "name": "target",
        "docs": "The framebuffer which should be drawn to.",
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       },
       {
        "name": "sequence_ptr",
        "docs": "The AGP code that defines the drawing.",
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "sequence_len",
        "docs": "Length of sequence_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "auto_invalidate",
        "docs": "If the target framebuffer is invalidatable, it is automatically invalidated after the completion",
        "type": {
         "ReferenceType": {
          "name": "bool"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "BadCode",
        "InvalidHandle"
       ]
      }
     }
    }
   }
  },
  {
   "name": "ShowMessageBox",
   "docs": "Opens a message box popup window and prompts the user for response.",
   "full_qualified_name": "gui.ShowMessageBox",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "message",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "caption",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "buttons",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "MessageBoxButtons"
         }
        }
       },
       {
        "name": "icon",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "MessageBoxIcon"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "message_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "message_len",
        "docs": "Length of message_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "caption_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "caption_len",
        "docs": "Length of caption_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "buttons",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "MessageBoxButtons"
         }
        }
       },
       {
        "name": "icon",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "MessageBoxIcon"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "result",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "MessageBoxResult"
         }
        }
       }
      ],
      "native": [
       {
        "name": "result",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "MessageBoxResult"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": []
      }
     }
    }
   }
  },
  {
   "name": "GetWindowEvent",
   "docs": "Waits for an event on the given `Window`, completing as soon as\nan event arrived.",
   "full_qualified_name": "gui.GetWindowEvent",
   "value": {
    "AsyncOp": {
     "inputs": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "outputs": {
      "abi": [
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WindowEvent"
         }
        }
       }
      ],
      "native": [
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WindowEvent"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "error": {
      "ErrorSet": {
       "errors": [
        "InProgress",
        "InvalidHandle",
        "Cancelled"
       ]
      }
     }
    }
   }
  }
 ],
 "syscalls": [
  {
   "name": "get_type",
   "docs": "Returns the type of the system resource.",
   "full_qualified_name": "resources.get_type",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "SystemResource.Type"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "SystemResource.Type"
        }
       }
      }
     },
     "key": "resources_get_type",
     "value": 1
    }
   }
  },
  {
   "name": "get_owners",
   "docs": "Returns the current owner of this resource.",
   "full_qualified_name": "resources.get_owners",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       },
       {
        "name": "owners",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Process"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       },
       {
        "name": "owners_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Process"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "owners_len",
        "docs": "Length of owners_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "resources_get_owners",
     "value": 2
    }
   }
  },
  {
   "name": "send_to_process",
   "docs": "Adds the process to the owners of this resource, so the process",
   "full_qualified_name": "resources.send_to_process",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       },
       {
        "name": "_param1",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       },
       {
        "name": "_param1",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "void"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "DeadProcess",
          "SystemResources",
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "void"
        }
       }
      }
     },
     "key": "resources_send_to_process",
     "value": 3
    }
   }
  },
  {
   "name": "release",
   "docs": "Drops the ownership of the resource for the current process.",
   "full_qualified_name": "resources.release",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "resources_release",
     "value": 4
    }
   }
  },
  {
   "name": "destroy",
   "docs": "Immediatly destroys the resource and releases its memory.",
   "full_qualified_name": "resources.destroy",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SystemResource"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "resources_destroy",
     "value": 5
    }
   }
  },
  {
   "name": "schedule",
   "docs": "Starts new asynchronous operations.",
   "full_qualified_name": "overlapped.schedule",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "async_call",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "ARC"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "async_call",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "ARC"
           }
          }
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "void"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "AlreadyScheduled",
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "void"
        }
       }
      }
     },
     "key": "overlapped_schedule",
     "value": 6
    }
   }
  },
  {
   "name": "await_completion",
   "docs": "Awaits one or more scheduled asynchronous operations and returns the",
   "full_qualified_name": "overlapped.await_completion",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "completed",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "PointerType": {
            "size": "*",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "ARC"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "options",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Await_Options"
         }
        }
       }
      ],
      "native": [
       {
        "name": "completed_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "PointerType": {
            "size": "*",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "ARC"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "completed_len",
        "docs": "Length of completed_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "options",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Await_Options"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "usize"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "Unscheduled"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "usize"
        }
       }
      }
     },
     "key": "overlapped_await_completion",
     "value": 7
    }
   }
  },
  {
   "name": "await_completion_of",
   "docs": "Awaits one or more explictic asynchronous operations and returns the",
   "full_qualified_name": "overlapped.await_completion_of",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "events",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "OptionalType": {
            "inner": {
             "PointerType": {
              "size": "*",
              "sentinel": "None",
              "const": false,
              "volatile": false,
              "alignment": null,
              "inner": {
               "ReferenceType": {
                "name": "ARC"
               }
              }
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "events_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "OptionalType": {
            "inner": {
             "PointerType": {
              "size": "*",
              "sentinel": "None",
              "const": false,
              "volatile": false,
              "alignment": null,
              "inner": {
               "ReferenceType": {
                "name": "ARC"
               }
              }
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "events_len",
        "docs": "Length of events_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "usize"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidOperation",
          "Unscheduled"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "usize"
        }
       }
      }
     },
     "key": "overlapped_await_completion_of",
     "value": 8
    }
   }
  },
  {
   "name": "cancel",
   "docs": "Cancels an asynchronous call.",
   "full_qualified_name": "overlapped.cancel",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "aop",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "ARC"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "aop",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "ARC"
           }
          }
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "void"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "Completed",
          "Unscheduled"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "void"
        }
       }
      }
     },
     "key": "overlapped_cancel",
     "value": 9
    }
   }
  },
  {
   "name": "get_file_name",
   "docs": "Returns a pointer to the file name of the process.",
   "full_qualified_name": "process.get_file_name",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "ReferenceType": {
            "name": "Process"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "ReferenceType": {
            "name": "Process"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "PointerType": {
       "size": "[*]",
       "sentinel": "0",
       "const": true,
       "volatile": false,
       "alignment": null,
       "inner": {
        "ReferenceType": {
         "name": "u8"
        }
       }
      }
     },
     "key": "process_get_file_name",
     "value": 10
    }
   }
  },
  {
   "name": "get_base_address",
   "docs": "Returns the base address of the process.",
   "full_qualified_name": "process.get_base_address",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "ReferenceType": {
            "name": "Process"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "ReferenceType": {
            "name": "Process"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "process_get_base_address",
     "value": 11
    }
   }
  },
  {
   "name": "get_arguments",
   "docs": "Returns the arguments that were passed to this process in `Spawn`.",
   "full_qualified_name": "process.get_arguments",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "ReferenceType": {
            "name": "Process"
           }
          }
         }
        }
       },
       {
        "name": "argv",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "SpawnProcessArg"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "ReferenceType": {
            "name": "Process"
           }
          }
         }
        }
       },
       {
        "name": "argv_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "SpawnProcessArg"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "argv_len",
        "docs": "Length of argv_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": true,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "process_get_arguments",
     "value": 12
    }
   }
  },
  {
   "name": "terminate",
   "docs": "Terminates the current process with the given exit code",
   "full_qualified_name": "process.terminate",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "exit_code",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ExitCode"
         }
        }
       }
      ],
      "native": [
       {
        "name": "exit_code",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ExitCode"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "noreturn"
      }
     },
     "key": "process_terminate",
     "value": 13
    }
   }
  },
  {
   "name": "kill",
   "docs": "Terminates a foreign process.",
   "full_qualified_name": "process.kill",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "process_kill",
     "value": 14
    }
   }
  },
  {
   "name": "yield",
   "docs": "Returns control to the scheduler. Returns when the scheduler",
   "full_qualified_name": "process.thread.yield",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "process_thread_yield",
     "value": 15
    }
   }
  },
  {
   "name": "exit",
   "docs": "Terminates the current thread.",
   "full_qualified_name": "process.thread.exit",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "exit_code",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ExitCode"
         }
        }
       }
      ],
      "native": [
       {
        "name": "exit_code",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ExitCode"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "noreturn"
      }
     },
     "key": "process_thread_exit",
     "value": 16
    }
   }
  },
  {
   "name": "join",
   "docs": "Waits for the thread to exit and returns its return code.",
   "full_qualified_name": "process.thread.join",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Thread"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Thread"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "ExitCode"
      }
     },
     "key": "process_thread_join",
     "value": 17
    }
   }
  },
  {
   "name": "spawn",
   "docs": "Spawns a new thread with `function` passing `arg` to it.",
   "full_qualified_name": "process.thread.spawn",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "function",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ThreadFunction"
         }
        }
       },
       {
        "name": "arg",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "*",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "anyopaque"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "stack_size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "function",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ThreadFunction"
         }
        }
       },
       {
        "name": "arg",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "*",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "anyopaque"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "stack_size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": true,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "OptionalType": {
       "inner": {
        "ReferenceType": {
         "name": "Thread"
        }
       }
      }
     },
     "key": "process_thread_spawn",
     "value": 18
    }
   }
  },
  {
   "name": "kill",
   "docs": "Kills the given thread with `exit_code`.",
   "full_qualified_name": "process.thread.kill",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Thread"
         }
        }
       },
       {
        "name": "exit_code",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ExitCode"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Thread"
         }
        }
       },
       {
        "name": "exit_code",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "ExitCode"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "process_thread_kill",
     "value": 19
    }
   }
  },
  {
   "name": "write_log",
   "docs": "Writes to the system debug log.",
   "full_qualified_name": "process.debug.write_log",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "log_level",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "LogLevel"
         }
        }
       },
       {
        "name": "message",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "log_level",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "LogLevel"
         }
        }
       },
       {
        "name": "message_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "message_len",
        "docs": "Length of message_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "process_debug_write_log",
     "value": 20
    }
   }
  },
  {
   "name": "breakpoint",
   "docs": "Stops the process and allows debugging.",
   "full_qualified_name": "process.debug.breakpoint",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "process_debug_breakpoint",
     "value": 21
    }
   }
  },
  {
   "name": "allocate",
   "docs": "Allocates memory",
   "full_qualified_name": "process.memory.allocate",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "ptr_align",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u8"
         }
        }
       }
      ],
      "native": [
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "ptr_align",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u8"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "OptionalType": {
       "inner": {
        "PointerType": {
         "size": "[*]",
         "sentinel": "None",
         "const": false,
         "volatile": false,
         "alignment": null,
         "inner": {
          "ReferenceType": {
           "name": "u8"
          }
         }
        }
       }
      }
     },
     "key": "process_memory_allocate",
     "value": 22
    }
   }
  },
  {
   "name": "release",
   "docs": "Returns memory to the systme.",
   "full_qualified_name": "process.memory.release",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "mem",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "ptr_align",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u8"
         }
        }
       }
      ],
      "native": [
       {
        "name": "mem_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "mem_len",
        "docs": "Length of mem_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "ptr_align",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "u8"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "process_memory_release",
     "value": 23
    }
   }
  },
  {
   "name": "enumerate_processes",
   "docs": "Queries all owned resources by a process.",
   "full_qualified_name": "process.monitor.enumerate_processes",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "processes",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Process"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "processes_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Process"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "processes_len",
        "docs": "Length of processes_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "process_monitor_enumerate_processes",
     "value": 24
    }
   }
  },
  {
   "name": "query_owned_resources",
   "docs": "Queries all owned resources by a process.",
   "full_qualified_name": "process.monitor.query_owned_resources",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "owner",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       },
       {
        "name": "reslist",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "SystemResource"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "owner",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       },
       {
        "name": "reslist_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "SystemResource"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "reslist_len",
        "docs": "Length of reslist_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "process_monitor_query_owned_resources",
     "value": 25
    }
   }
  },
  {
   "name": "query_total_memory_usage",
   "docs": "Returns the total number of bytes the process takes up in RAM.",
   "full_qualified_name": "process.monitor.query_total_memory_usage",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "proc",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "native": [
       {
        "name": "proc",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "process_monitor_query_total_memory_usage",
     "value": 26
    }
   }
  },
  {
   "name": "query_dynamic_memory_usage",
   "docs": "Returns the number of dynamically allocated bytes for this process.",
   "full_qualified_name": "process.monitor.query_dynamic_memory_usage",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "proc",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "native": [
       {
        "name": "proc",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "process_monitor_query_dynamic_memory_usage",
     "value": 27
    }
   }
  },
  {
   "name": "query_active_allocation_count",
   "docs": "Returns the number of total memory objects this process has right now.",
   "full_qualified_name": "process.monitor.query_active_allocation_count",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "proc",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "native": [
       {
        "name": "proc",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Process"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "process_monitor_query_active_allocation_count",
     "value": 28
    }
   }
  },
  {
   "name": "monotonic",
   "docs": "Returns the time in nanoseconds since system startup.",
   "full_qualified_name": "clock.monotonic",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "Absolute"
      }
     },
     "key": "clock_monotonic",
     "value": 29
    }
   }
  },
  {
   "name": "now",
   "docs": "Get a calendar timestamp relative to UTC 1970-01-01.",
   "full_qualified_name": "datetime.now",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [],
      "annotations": []
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "DateTime"
      }
     },
     "key": "datetime_now",
     "value": 30
    }
   }
  },
  {
   "name": "enumerate",
   "docs": "Returns a list of all video outputs.",
   "full_qualified_name": "video.enumerate",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "ids",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "VideoOutputID"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "ids_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "VideoOutputID"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "ids_len",
        "docs": "Length of ids_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "video_enumerate",
     "value": 31
    }
   }
  },
  {
   "name": "acquire",
   "docs": "Acquire exclusive access to a video output.",
   "full_qualified_name": "video.acquire",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutputID"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutputID"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "VideoOutput"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "NotAvailable",
          "SystemResources",
          "NotFound"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "VideoOutput"
        }
       }
      }
     },
     "key": "video_acquire",
     "value": 32
    }
   }
  },
  {
   "name": "get_resolution",
   "docs": "Returns the current resolution",
   "full_qualified_name": "video.get_resolution",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Size"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Size"
        }
       }
      }
     },
     "key": "video_get_resolution",
     "value": 33
    }
   }
  },
  {
   "name": "get_video_memory",
   "docs": "Returns a pointer to linear video memory, row-major.",
   "full_qualified_name": "video.get_video_memory",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "VideoMemory"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "VideoMemory"
        }
       }
      }
     },
     "key": "video_get_video_memory",
     "value": 34
    }
   }
  },
  {
   "name": "get_soft_random",
   "docs": "Fills the provided pointer with random bytes from the entropy pool.",
   "full_qualified_name": "random.get_soft_random",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "data",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "data_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "data_len",
        "docs": "Length of data_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "random_get_soft_random",
     "value": 35
    }
   }
  },
  {
   "name": "create_socket",
   "docs": "Creates a new TCP socket.",
   "full_qualified_name": "network.udp.create_socket",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "UdpSocket"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "UdpSocket"
        }
       }
      }
     },
     "key": "network_udp_create_socket",
     "value": 36
    }
   }
  },
  {
   "name": "create_socket",
   "docs": "Creates a new UDP socket.",
   "full_qualified_name": "network.tcp.create_socket",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "TcpSocket"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "TcpSocket"
        }
       }
      }
     },
     "key": "network_tcp_create_socket",
     "value": 37
    }
   }
  },
  {
   "name": "find_filesystem",
   "docs": "Finds a file system by name",
   "full_qualified_name": "fs.find_filesystem",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "name",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "name_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "name_len",
        "docs": "Length of name_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "FileSystemId"
      }
     },
     "key": "fs_find_filesystem",
     "value": 38
    }
   }
  },
  {
   "name": "create",
   "docs": "Constructs a new shared memory object with `size` bytes of memory.",
   "full_qualified_name": "shm.create",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "SharedMemory"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "SharedMemory"
        }
       }
      }
     },
     "key": "shm_create",
     "value": 39
    }
   }
  },
  {
   "name": "get_length",
   "docs": "Returns the number of bytes inside the given shared memory object.",
   "full_qualified_name": "shm.get_length",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SharedMemory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SharedMemory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "shm_get_length",
     "value": 40
    }
   }
  },
  {
   "name": "get_pointer",
   "docs": "Returns a pointer to the shared memory.",
   "full_qualified_name": "shm.get_pointer",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SharedMemory"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SharedMemory"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "PointerType": {
       "size": "[*]",
       "sentinel": "None",
       "const": false,
       "volatile": false,
       "alignment": 16,
       "inner": {
        "ReferenceType": {
         "name": "u8"
        }
       }
      }
     },
     "key": "shm_get_pointer",
     "value": 41
    }
   }
  },
  {
   "name": "create",
   "docs": "Spawns a new pipe with `fifo_length` elements of `object_size` bytes.",
   "full_qualified_name": "pipe.create",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "object_size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "fifo_length",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "native": [
       {
        "name": "object_size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "fifo_length",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Pipe"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Pipe"
        }
       }
      }
     },
     "key": "pipe_create",
     "value": 42
    }
   }
  },
  {
   "name": "get_fifo_length",
   "docs": "Returns the length of the pipe-internal FIFO in elements.",
   "full_qualified_name": "pipe.get_fifo_length",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "pipe_get_fifo_length",
     "value": 43
    }
   }
  },
  {
   "name": "get_object_size",
   "docs": "Returns the size of the objects stored in the pipe.",
   "full_qualified_name": "pipe.get_object_size",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Pipe"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "pipe_get_object_size",
     "value": 44
    }
   }
  },
  {
   "name": "create_event",
   "docs": "Creates a new `SyncEvent` object that can be used to synchronize",
   "full_qualified_name": "sync.create_event",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "SyncEvent"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "SyncEvent"
        }
       }
      }
     },
     "key": "sync_create_event",
     "value": 45
    }
   }
  },
  {
   "name": "notify_one",
   "docs": "Completes one `WaitForEvent` IOP waiting for the given event.",
   "full_qualified_name": "sync.notify_one",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SyncEvent"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SyncEvent"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "sync_notify_one",
     "value": 46
    }
   }
  },
  {
   "name": "notify_all",
   "docs": "Completes all `WaitForEvent` IOP waiting for the given event.",
   "full_qualified_name": "sync.notify_all",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SyncEvent"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "SyncEvent"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "sync_notify_all",
     "value": 47
    }
   }
  },
  {
   "name": "create_mutex",
   "docs": "Creates a new mutual exclusion.",
   "full_qualified_name": "sync.create_mutex",
   "value": {
    "Function": {
     "params": {
      "abi": [],
      "native": [
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Mutex"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Mutex"
        }
       }
      }
     },
     "key": "sync_create_mutex",
     "value": 48
    }
   }
  },
  {
   "name": "try_lock",
   "docs": "Tries to lock a mutex and returns if it was successful.",
   "full_qualified_name": "sync.try_lock",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Mutex"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Mutex"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "bool"
      }
     },
     "key": "sync_try_lock",
     "value": 49
    }
   }
  },
  {
   "name": "unlock",
   "docs": "Unlocks a mutual exclusion. Completes a single `Lock` IOP if it exists.",
   "full_qualified_name": "sync.unlock",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Mutex"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Mutex"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "sync_unlock",
     "value": 50
    }
   }
  },
  {
   "name": "get_system_font",
   "docs": "Returns the font data for the given font name, if any.",
   "full_qualified_name": "draw.get_system_font",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "font_name",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "font_name_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "font_name_len",
        "docs": "Length of font_name_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Font"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "FileNotFound",
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Font"
        }
       }
      }
     },
     "key": "draw_get_system_font",
     "value": 51
    }
   }
  },
  {
   "name": "create_font",
   "docs": "Creates a new custom font from the given data.",
   "full_qualified_name": "draw.create_font",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "data",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "data_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "data_len",
        "docs": "Length of data_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Font"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources",
          "InvalidData"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Font"
        }
       }
      }
     },
     "key": "draw_create_font",
     "value": 52
    }
   }
  },
  {
   "name": "is_system_font",
   "docs": "Returns true if the given font is a system-owned font.",
   "full_qualified_name": "draw.is_system_font",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Font"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Font"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "bool"
      }
     },
     "key": "draw_is_system_font",
     "value": 53
    }
   }
  },
  {
   "name": "create_memory_framebuffer",
   "docs": "Creates a new in-memory framebuffer that can be used for offscreen painting.",
   "full_qualified_name": "draw.create_memory_framebuffer",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       }
      ],
      "native": [
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Framebuffer"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Framebuffer"
        }
       }
      }
     },
     "key": "draw_create_memory_framebuffer",
     "value": 54
    }
   }
  },
  {
   "name": "create_video_framebuffer",
   "docs": "Creates a new framebuffer based off a video output. Can be used to output pixels",
   "full_qualified_name": "draw.create_video_framebuffer",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "VideoOutput"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Framebuffer"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources",
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Framebuffer"
        }
       }
      }
     },
     "key": "draw_create_video_framebuffer",
     "value": 55
    }
   }
  },
  {
   "name": "create_window_framebuffer",
   "docs": "Creates a new framebuffer that allows painting into a GUI window.",
   "full_qualified_name": "draw.create_window_framebuffer",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Framebuffer"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources",
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Framebuffer"
        }
       }
      }
     },
     "key": "draw_create_window_framebuffer",
     "value": 56
    }
   }
  },
  {
   "name": "create_widget_framebuffer",
   "docs": "Creates a new framebuffer that allows painting into a widget.",
   "full_qualified_name": "draw.create_widget_framebuffer",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Framebuffer"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources",
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Framebuffer"
        }
       }
      }
     },
     "key": "draw_create_widget_framebuffer",
     "value": 57
    }
   }
  },
  {
   "name": "get_framebuffer_type",
   "docs": "Returns the type of a framebuffer object.",
   "full_qualified_name": "draw.get_framebuffer_type",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "FramebufferType"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "FramebufferType"
        }
       }
      }
     },
     "key": "draw_get_framebuffer_type",
     "value": 58
    }
   }
  },
  {
   "name": "get_framebuffer_size",
   "docs": "Returns the size of a framebuffer object.",
   "full_qualified_name": "draw.get_framebuffer_size",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Size"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Size"
        }
       }
      }
     },
     "key": "draw_get_framebuffer_size",
     "value": 59
    }
   }
  },
  {
   "name": "get_framebuffer_memory",
   "docs": "Returns the video memory for a *memory* framebuffer.",
   "full_qualified_name": "draw.get_framebuffer_memory",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "VideoMemory"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "Unsupported",
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "VideoMemory"
        }
       }
      }
     },
     "key": "draw_get_framebuffer_memory",
     "value": 60
    }
   }
  },
  {
   "name": "invalidate_framebuffer",
   "docs": "Marks a portion of the framebuffer as changed and forces the OS to",
   "full_qualified_name": "draw.invalidate_framebuffer",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       },
       {
        "name": "_param1",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Rectangle"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Framebuffer"
         }
        }
       },
       {
        "name": "_param1",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Rectangle"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "draw_invalidate_framebuffer",
     "value": 61
    }
   }
  },
  {
   "name": "register_widget_type",
   "docs": null,
   "full_qualified_name": "gui.register_widget_type",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "WidgetDescriptor"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "WidgetDescriptor"
           }
          }
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "WidgetType"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources",
          "AlreadyRegistered"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "WidgetType"
        }
       }
      }
     },
     "key": "gui_register_widget_type",
     "value": 62
    }
   }
  },
  {
   "name": "create_window",
   "docs": "Spawns a new window.",
   "full_qualified_name": "gui.create_window",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "title",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "min",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "max",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "startup",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "flags",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "CreateWindowFlags"
         }
        }
       }
      ],
      "native": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "title_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "title_len",
        "docs": "Length of title_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "min",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "max",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "startup",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "flags",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "CreateWindowFlags"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Window"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidDimensions",
          "SystemResources",
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Window"
        }
       }
      }
     },
     "key": "gui_create_window",
     "value": 63
    }
   }
  },
  {
   "name": "get_window_title",
   "docs": null,
   "full_qualified_name": "gui.get_window_title",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "out_title",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": true,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "out_title_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": true,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "out_title_len",
        "docs": "Length of out_title_ptr",
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "usize"
           }
          }
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "void"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": true,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "void"
        }
       }
      }
     },
     "key": "gui_get_window_title",
     "value": 64
    }
   }
  },
  {
   "name": "get_window_size",
   "docs": null,
   "full_qualified_name": "gui.get_window_size",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Size"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Size"
        }
       }
      }
     },
     "key": "gui_get_window_size",
     "value": 65
    }
   }
  },
  {
   "name": "get_window_min_size",
   "docs": null,
   "full_qualified_name": "gui.get_window_min_size",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Size"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Size"
        }
       }
      }
     },
     "key": "gui_get_window_min_size",
     "value": 66
    }
   }
  },
  {
   "name": "get_window_max_size",
   "docs": null,
   "full_qualified_name": "gui.get_window_max_size",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Size"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Size"
        }
       }
      }
     },
     "key": "gui_get_window_max_size",
     "value": 67
    }
   }
  },
  {
   "name": "get_window_flags",
   "docs": null,
   "full_qualified_name": "gui.get_window_flags",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "WindowFlags"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "WindowFlags"
        }
       }
      }
     },
     "key": "gui_get_window_flags",
     "value": 68
    }
   }
  },
  {
   "name": "set_window_size",
   "docs": "Sets the `size` of `window` and returns the new actual size.",
   "full_qualified_name": "gui.set_window_size",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Size"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Size"
        }
       }
      }
     },
     "key": "gui_set_window_size",
     "value": 69
    }
   }
  },
  {
   "name": "resize_window",
   "docs": "Resizes a window to the new size.",
   "full_qualified_name": "gui.resize_window",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "gui_resize_window",
     "value": 70
    }
   }
  },
  {
   "name": "set_window_title",
   "docs": "Changes a window title.",
   "full_qualified_name": "gui.set_window_title",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "title",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "title_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "title_len",
        "docs": "Length of title_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "gui_set_window_title",
     "value": 71
    }
   }
  },
  {
   "name": "mark_window_urgent",
   "docs": "Notifies the desktop that a window wants attention from the user.",
   "full_qualified_name": "gui.mark_window_urgent",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "gui_mark_window_urgent",
     "value": 72
    }
   }
  },
  {
   "name": "create_widget",
   "docs": "Create a new widget identified by `uuid` on the given `window`.",
   "full_qualified_name": "gui.create_widget",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "uuid",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "UUID"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "uuid",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "UUID"
           }
          }
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Widget"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "WidgetNotFound",
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Widget"
        }
       }
      }
     },
     "key": "gui_create_widget",
     "value": 73
    }
   }
  },
  {
   "name": "place_widget",
   "docs": "Moves and resizes a widget in one.",
   "full_qualified_name": "gui.place_widget",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "widget",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       },
       {
        "name": "position",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Point"
         }
        }
       },
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       }
      ],
      "native": [
       {
        "name": "widget",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       },
       {
        "name": "position",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Point"
         }
        }
       },
       {
        "name": "size",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Size"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "void"
      }
     },
     "key": "gui_place_widget",
     "value": 74
    }
   }
  },
  {
   "name": "control_widget",
   "docs": "Triggers the `control` event of the widget with the given `message` as a payload.",
   "full_qualified_name": "gui.control_widget",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "widget",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       },
       {
        "name": "message",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WidgetControlMessage"
         }
        }
       }
      ],
      "native": [
       {
        "name": "widget",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       },
       {
        "name": "message",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WidgetControlMessage"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ErrorSet": {
       "errors": [
        "SystemResources"
       ]
      }
     },
     "key": "gui_control_widget",
     "value": 75
    }
   }
  },
  {
   "name": "notify_owner",
   "docs": "Triggers the `widget_notify` event of the `Window` that owns `widget` with `event` as the payload.",
   "full_qualified_name": "gui.notify_owner",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "widget",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       },
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WidgetNotifyEvent"
         }
        }
       }
      ],
      "native": [
       {
        "name": "widget",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       },
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WidgetNotifyEvent"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ErrorSet": {
       "errors": [
        "SystemResources"
       ]
      }
     },
     "key": "gui_notify_owner",
     "value": 76
    }
   }
  },
  {
   "name": "get_widget_data",
   "docs": "Returns WidgetType-associated \"opaque\" data for this widget.",
   "full_qualified_name": "gui.get_widget_data",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Widget"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "PointerType": {
       "size": "[*]",
       "sentinel": "None",
       "const": false,
       "volatile": false,
       "alignment": 16,
       "inner": {
        "ReferenceType": {
         "name": "u8"
        }
       }
      }
     },
     "key": "gui_get_widget_data",
     "value": 77
    }
   }
  },
  {
   "name": "create_desktop",
   "docs": "Creates a new desktop with the given name.",
   "full_qualified_name": "gui.create_desktop",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "name",
        "docs": "User-visible name of the desktop.",
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "descriptor",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "DesktopDescriptor"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "name_ptr",
        "docs": "User-visible name of the desktop.",
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "name_len",
        "docs": "Length of name_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "descriptor",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "DesktopDescriptor"
           }
          }
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Desktop"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Desktop"
        }
       }
      }
     },
     "key": "gui_create_desktop",
     "value": 78
    }
   }
  },
  {
   "name": "get_desktop_name",
   "docs": "Returns the name of the provided desktop.",
   "full_qualified_name": "gui.get_desktop_name",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "0",
            "const": true,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "PointerType": {
         "size": "[*]",
         "sentinel": "0",
         "const": true,
         "volatile": false,
         "alignment": null,
         "inner": {
          "ReferenceType": {
           "name": "u8"
          }
         }
        }
       }
      }
     },
     "key": "gui_get_desktop_name",
     "value": 79
    }
   }
  },
  {
   "name": "enumerate_desktops",
   "docs": "Enumerates all available desktops.",
   "full_qualified_name": "gui.enumerate_desktops",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "serverlist",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Desktop"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "serverlist_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Desktop"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "serverlist_len",
        "docs": "Length of serverlist_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "gui_enumerate_desktops",
     "value": 80
    }
   }
  },
  {
   "name": "enumerate_desktop_windows",
   "docs": "Returns all windows for a desktop handle.",
   "full_qualified_name": "gui.enumerate_desktop_windows",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "window",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Window"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "window_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Window"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "window_len",
        "docs": "Length of window_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "usize"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "usize"
        }
       }
      }
     },
     "key": "gui_enumerate_desktop_windows",
     "value": 81
    }
   }
  },
  {
   "name": "get_desktop_data",
   "docs": "Returns desktop-associated \"opaque\" data for this window.",
   "full_qualified_name": "gui.get_desktop_data",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": 16,
            "inner": {
             "ReferenceType": {
              "name": "u8"
             }
            }
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "PointerType": {
         "size": "[*]",
         "sentinel": "None",
         "const": false,
         "volatile": false,
         "alignment": 16,
         "inner": {
          "ReferenceType": {
           "name": "u8"
          }
         }
        }
       }
      }
     },
     "key": "gui_get_desktop_data",
     "value": 82
    }
   }
  },
  {
   "name": "notify_message_box",
   "docs": "Notifies the system that a message box was confirmed by the user.",
   "full_qualified_name": "gui.notify_message_box",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "source",
        "docs": "The desktop that completed the message box.",
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "request_id",
        "docs": "The request id that was passed in `MessageBoxEvent`.",
        "type": {
         "ReferenceType": {
          "name": "MessageBoxEvent.RequestID"
         }
        }
       },
       {
        "name": "result",
        "docs": "The resulting button which the user clicked.",
        "type": {
         "ReferenceType": {
          "name": "MessageBoxResult"
         }
        }
       }
      ],
      "native": [
       {
        "name": "source",
        "docs": "The desktop that completed the message box.",
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "request_id",
        "docs": "The request id that was passed in `MessageBoxEvent`.",
        "type": {
         "ReferenceType": {
          "name": "MessageBoxEvent.RequestID"
         }
        }
       },
       {
        "name": "result",
        "docs": "The resulting button which the user clicked.",
        "type": {
         "ReferenceType": {
          "name": "MessageBoxResult"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "void"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "BadRequestId",
          "InvalidHandle"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "void"
        }
       }
      }
     },
     "key": "gui_notify_message_box",
     "value": 83
    }
   }
  },
  {
   "name": "post_window_event",
   "docs": "Posts an event into the window event queue so the window owner",
   "full_qualified_name": "gui.post_window_event",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WindowEvent"
         }
        }
       }
      ],
      "native": [
       {
        "name": "window",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Window"
         }
        }
       },
       {
        "name": "event",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "WindowEvent"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ErrorSet": {
       "errors": [
        "SystemResources",
        "InvalidHandle"
       ]
      }
     },
     "key": "gui_post_window_event",
     "value": 84
    }
   }
  },
  {
   "name": "send_notification",
   "docs": "Sends a notification to the provided `desktop`.",
   "full_qualified_name": "gui.send_notification",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "desktop",
        "docs": "Where to show the notification?",
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "message",
        "docs": "What text is displayed in the notification?",
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "severity",
        "docs": "How urgent is the notification to the user?",
        "type": {
         "ReferenceType": {
          "name": "NotificationSeverity"
         }
        }
       }
      ],
      "native": [
       {
        "name": "desktop",
        "docs": "Where to show the notification?",
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "message_ptr",
        "docs": "What text is displayed in the notification?",
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "message_len",
        "docs": "Length of message_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "severity",
        "docs": "How urgent is the notification to the user?",
        "type": {
         "ReferenceType": {
          "name": "NotificationSeverity"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ErrorSet": {
       "errors": [
        "SystemResources",
        "InvalidHandle"
       ]
      }
     },
     "key": "gui_send_notification",
     "value": 85
    }
   }
  },
  {
   "name": "set",
   "docs": "Sets the contents of the clip board.",
   "full_qualified_name": "gui.clipboard.set",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "mime",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "mime_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "mime_len",
        "docs": "Length of mime_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "value_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "value_len",
        "docs": "Length of value_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ErrorSet": {
       "errors": [
        "SystemResources"
       ]
      }
     },
     "key": "gui_clipboard_set",
     "value": 86
    }
   }
  },
  {
   "name": "get_type",
   "docs": "Returns the current type present in the clipboard, if any.",
   "full_qualified_name": "gui.clipboard.get_type",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       }
      ],
      "native": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "OptionalType": {
       "inner": {
        "PointerType": {
         "size": "[*]",
         "sentinel": "0",
         "const": true,
         "volatile": false,
         "alignment": null,
         "inner": {
          "ReferenceType": {
           "name": "u8"
          }
         }
        }
       }
      }
     },
     "key": "gui_clipboard_get_type",
     "value": 87
    }
   }
  },
  {
   "name": "get_value",
   "docs": "Returns the current clipboard value as the provided mime type.",
   "full_qualified_name": "gui.clipboard.get_value",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "mime",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "OptionalType": {
            "inner": {
             "PointerType": {
              "size": "[]",
              "sentinel": "None",
              "const": true,
              "volatile": false,
              "alignment": null,
              "inner": {
               "ReferenceType": {
                "name": "u8"
               }
              }
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "desktop",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Desktop"
         }
        }
       },
       {
        "name": "mime_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "mime_len",
        "docs": "Length of mime_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "value_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "OptionalType": {
            "inner": {
             "PointerType": {
              "size": "[*]",
              "sentinel": "None",
              "const": true,
              "volatile": false,
              "alignment": null,
              "inner": {
               "ReferenceType": {
                "name": "u8"
               }
              }
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "value_len",
        "docs": "Length of value_ptr",
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "usize"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": true,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ErrorSet": {
       "errors": [
        "OutOfMemory",
        "ConversionFailed"
       ]
      }
     },
     "key": "gui_clipboard_get_value",
     "value": 88
    }
   }
  },
  {
   "name": "create",
   "docs": "Registers a new service `uuid` in the system.",
   "full_qualified_name": "service.create",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "uuid",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "UUID"
           }
          }
         }
        }
       },
       {
        "name": "funcs",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "AbstractFunction"
           }
          }
         }
        }
       },
       {
        "name": "name",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "uuid",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "UUID"
           }
          }
         }
        }
       },
       {
        "name": "funcs_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "AbstractFunction"
           }
          }
         }
        }
       },
       {
        "name": "funcs_len",
        "docs": "Length of funcs_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "name_ptr",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "[*]",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "u8"
           }
          }
         }
        }
       },
       {
        "name": "name_len",
        "docs": "Length of name_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       },
       {
        "name": "__return_value",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": false,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "Service"
           }
          }
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": true
       }
      ]
     },
     "abi_return_type": {
      "ErrorUnion": {
       "error": {
        "ErrorSet": {
         "errors": [
          "SystemResources",
          "AlreadyRegistered"
         ]
        }
       },
       "result": {
        "ReferenceType": {
         "name": "Service"
        }
       }
      }
     },
     "key": "service_create",
     "value": 89
    }
   }
  },
  {
   "name": "enumerate",
   "docs": "Enumerates all registered services.",
   "full_qualified_name": "service.enumerate",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "uuid",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "UUID"
           }
          }
         }
        }
       },
       {
        "name": "services",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Service"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "uuid",
        "docs": null,
        "type": {
         "PointerType": {
          "size": "*",
          "sentinel": "None",
          "const": true,
          "volatile": false,
          "alignment": null,
          "inner": {
           "ReferenceType": {
            "name": "UUID"
           }
          }
         }
        }
       },
       {
        "name": "services_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "Service"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "services_len",
        "docs": "Length of services_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "service_enumerate",
     "value": 90
    }
   }
  },
  {
   "name": "get_name",
   "docs": "Returns the name of the service.",
   "full_qualified_name": "service.get_name",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Service"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Service"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "PointerType": {
       "size": "[*]",
       "sentinel": "0",
       "const": true,
       "volatile": false,
       "alignment": null,
       "inner": {
        "ReferenceType": {
         "name": "u8"
        }
       }
      }
     },
     "key": "service_get_name",
     "value": 91
    }
   }
  },
  {
   "name": "get_process",
   "docs": "Returns the process that created this service.",
   "full_qualified_name": "service.get_process",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Service"
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Service"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "Process"
      }
     },
     "key": "service_get_process",
     "value": 92
    }
   }
  },
  {
   "name": "get_functions",
   "docs": "Returns the functions registerd by the service.",
   "full_qualified_name": "service.get_functions",
   "value": {
    "Function": {
     "params": {
      "abi": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Service"
         }
        }
       },
       {
        "name": "funcs",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "AbstractFunction"
             }
            }
           }
          }
         }
        }
       }
      ],
      "native": [
       {
        "name": "_param0",
        "docs": null,
        "type": {
         "ReferenceType": {
          "name": "Service"
         }
        }
       },
       {
        "name": "funcs_ptr",
        "docs": null,
        "type": {
         "OptionalType": {
          "inner": {
           "PointerType": {
            "size": "[*]",
            "sentinel": "None",
            "const": false,
            "volatile": false,
            "alignment": null,
            "inner": {
             "ReferenceType": {
              "name": "AbstractFunction"
             }
            }
           }
          }
         }
        }
       },
       {
        "name": "funcs_len",
        "docs": "Length of funcs_ptr",
        "type": {
         "ReferenceType": {
          "name": "usize"
         }
        }
       }
      ],
      "annotations": [
       {
        "is_slice": false,
        "is_optional": false,
        "is_out": false,
        "technical": false
       },
       {
        "is_slice": true,
        "is_optional": true,
        "is_out": false,
        "technical": false
       }
      ]
     },
     "abi_return_type": {
      "ReferenceType": {
       "name": "usize"
      }
     },
     "key": "service_get_functions",
     "value": 93
    }
   }
  }
 ]
}