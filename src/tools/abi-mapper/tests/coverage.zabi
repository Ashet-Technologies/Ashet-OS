const syscalls = struct {
    /// This is a documentation example!
    extern fn no_operation() void;

    extern fn arg_with_name(v: u32) u32;
    extern fn arg_without_name(u32) u32;

    extern fn regular_slice(
        /// This is a parameter comment
        slice: []const u8,
    ) u32;

    extern fn optional_slice(slice: ?[]const u8) u32;

    extern fn out_slice(index: u32, out: *[]const u8) void;

    extern fn out_optional_slice(index: u32, out: *?[]const u8) void;

    extern fn return_plain_error(index: u32) error{ One, Two };

    extern fn return_error_union(square: f32) error{ Domain, TooLarge }!f32;

    const slice_asserts = struct {
        extern fn basic([]const u8) void;
        extern fn optional(?[]const u8) void;
        extern fn out_basic(*[]const u8) void;
        extern fn out_optional(*?[]const u8) void;
        extern fn inout_basic(*[]const u8) void;
        extern fn inout_optional(*?[]const u8) void;
    };
};

/// Namespace documentation
/// This is a second line
const io = struct {
    extern "async" fn NoOperation() error{}!void;
};

/// This is a foo
pub const Src1 = struct(SystemResource) {};

const namespaced = struct {
    pub const Src2 = struct(SystemResource) {};
};

usingnamespace zig; // regular code beyond this

// pass this verbatim!

const std = @import("std");

pub const SystemResource = struct {};

pub const ARC = struct {};

pub const resources = struct {};

pub fn ErrorSet(comptime ErrorType: type) type {
    const raw_errors = @typeInfo(ErrorType).ErrorSet orelse @compileError("anyerror is not a legal error set");

    var errors = raw_errors[0..raw_errors.len].*;

    std.sort.heap(std.builtin.Type.Error, &errors, {}, struct {
        fn lt(_: void, lhs: std.builtin.Type.Error, rhs: std.builtin.Type.Error) bool {
            return std.mem.lessThan(u8, lhs.name, rhs.name);
        }
    }.lt);

    var enum_fields: [1 + errors.len]std.builtin.Type.EnumField = undefined;

    enum_fields[0] = .{ .name = "ok", .value = 0 };

    for (enum_fields[1..], errors, 1..) |*uf, err, index| {
        uf.* = .{
            .name = err.name,
            .value = index,
        };
    }

    const backing_int = if (enum_fields.len <= std.math.maxInt(u8))
        u8
    else if (enum_fields.len <= std.math.maxInt(u16))
        u8
    else if (enum_fields.len <= std.math.maxInt(u32))
        u8
    else
        u64; // you mad person

    return @Type(.{
        .Enum = .{
            .tag_type = backing_int,
            .fields = &enum_fields,
            .decls = &.{},
            .is_exhaustive = false,
        },
    });
}
